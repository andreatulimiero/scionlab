!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCOUNT_ACTIVATION_DAYS	settings/common.py	/^ACCOUNT_ACTIVATION_DAYS = 14  # Allow a two-week time window for account activation after signup$/;"	v
ALLOWED_HOSTS	settings/common.py	/^ALLOWED_HOSTS = []$/;"	v
ALLOWED_HOSTS	settings/development.py	/^ALLOWED_HOSTS = ['*']$/;"	v
ALLOWED_HOSTS	settings/production.py	/^ALLOWED_HOSTS = [_scionlab_host]$/;"	v
AS	models/core.py	/^    AS = models.ForeignKey($/;"	v	class:BorderRouter
AS	models/core.py	/^    AS = models.ForeignKey($/;"	v	class:Host
AS	models/core.py	/^    AS = models.ForeignKey($/;"	v	class:Interface
AS	models/core.py	/^    AS = models.ForeignKey($/;"	v	class:Service
AS	models/core.py	/^class AS(TimestampedModel):$/;"	c
AS	models/user_as.py	/^    AS = models.OneToOneField($/;"	v	class:AttachmentPoint
ASAdmin	admin.py	/^class ASAdmin(admin.ModelAdmin):$/;"	c
ASAdminTests	tests/test_admin.py	/^class ASAdminTests(TestCase):$/;"	c
ASCreationForm	admin.py	/^class ASCreationForm(_CreateUpdateModelForm):$/;"	c
ASIDTests	tests/test_as_ids.py	/^class ASIDTests(TestCase):$/;"	c
ASManager	models/core.py	/^class ASManager(models.Manager):$/;"	c
AS_ETHZ	tests/test_models.py	/^    AS_ETHZ = 'ffaa:0:1102'$/;"	v	class:LinkModificationTests
AS_SCMN	tests/test_models.py	/^    AS_SCMN = 'ffaa:0:1101'$/;"	v	class:LinkModificationTests
AS_SWTH	tests/test_models.py	/^    AS_SWTH = 'ffaa:0:1103'$/;"	v	class:LinkModificationTests
ASdef	fixtures/testtopo.py	/^ASdef = namedtuple('ASdef', ['isd_id', 'as_id', 'label', 'public_ip', 'is_core', 'is_ap'])$/;"	v
AUTH_USER_MODEL	settings/common.py	/^AUTH_USER_MODEL = 'scionlab.User'$/;"	v
ActivateUserASTests	tests/test_user_as_models.py	/^class ActivateUserASTests(TestCase):$/;"	c
ActivationRequiredTest	tests/test_registration.py	/^class ActivationRequiredTest(TestCase):$/;"	c
AttachmentLinkForm	forms/attachment_link_form.py	/^class AttachmentLinkForm(forms.ModelForm):$/;"	c
AttachmentLinksFormSet	views/user_as_views.py	/^class AttachmentLinksFormSet(BaseModelFormSet):$/;"	c
AttachmentPoint	models/user_as.py	/^class AttachmentPoint(models.Model):$/;"	c
AttachmentPointVPN	views/user_as_views.py	/^AttachmentPointVPN = namedtuple('AttachmentPointVPN', ['attachment_point', 'vpn'])$/;"	v
AuthenticationFormWithCaptcha	forms/login_form.py	/^class AuthenticationFormWithCaptcha(AuthenticationForm):$/;"	c
BASE_DIR	settings/common.py	/^BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))$/;"	v
BS	models/core.py	/^    BS = 'BS'$/;"	v	class:Service
BW	models/core.py	/^    BW = 'BW'$/;"	v	class:Service
BaseArchiveWriter	util/archive.py	/^class BaseArchiveWriter:$/;"	c
BorderRouter	models/core.py	/^class BorderRouter(models.Model):$/;"	c
BorderRouterAdminForm	admin.py	/^class BorderRouterAdminForm(_CreateUpdateModelForm):$/;"	c
BorderRouterInline	admin.py	/^class BorderRouterInline(admin.TabularInline):$/;"	c
BorderRouterManager	models/core.py	/^class BorderRouterManager(models.Manager):$/;"	c
CA_EXPIRE	settings/common.py	/^    CA_EXPIRE = 1000$/;"	v	class:VPNKeygenConf
CLIENT_CONFIG_TEMPLATE_PATH	openvpn_config.py	/^CLIENT_CONFIG_TEMPLATE_PATH = os.path.join(settings.BASE_DIR, "scionlab",$/;"	v
CORE	models/core.py	/^    CORE = 'CORE'$/;"	v	class:Link
CORE_AS_VALIDITY_PERIOD	certificates.py	/^CORE_AS_VALIDITY_PERIOD = _YEAR_SECONDS$/;"	v
CRISPY_TEMPLATE_PACK	settings/common.py	/^CRISPY_TEMPLATE_PACK = 'bootstrap4'$/;"	v
CS	models/core.py	/^    CS = 'CS'$/;"	v	class:Service
Command	management/commands/export_zonefile.py	/^class Command(BaseCommand):$/;"	c
Command	management/commands/initialize_root_ca.py	/^class Command(BaseCommand):$/;"	c
CreateUserASTests	tests/test_user_as_models.py	/^class CreateUserASTests(TestCase):$/;"	c
DATABASES	settings/development.py	/^DATABASES = {$/;"	v
DATABASES	settings/production.py	/^DATABASES = {$/;"	v
DEBUG	settings/common.py	/^DEBUG = False$/;"	v
DEBUG	settings/development.py	/^DEBUG = True$/;"	v
DEDICATED	models/user_as.py	/^    DEDICATED = 'DEDICATED'$/;"	v	class:UserAS
DEFAULT_BS_PORT	defines.py	/^DEFAULT_BS_PORT = 31041  # 30252$/;"	v
DEFAULT_BW_PORT	defines.py	/^DEFAULT_BW_PORT = 40001$/;"	v
DEFAULT_CONTROL_PORT	defines.py	/^DEFAULT_CONTROL_PORT = 30045   # 30042-30051$/;"	v
DEFAULT_CS_PORT	defines.py	/^DEFAULT_CS_PORT = 31042  # 30254$/;"	v
DEFAULT_FROM_EMAIL	settings/production.py	/^DEFAULT_FROM_EMAIL = 'scionlab@ethz.ch'$/;"	v
DEFAULT_HOST_INTERNAL_IP	defines.py	/^DEFAULT_HOST_INTERNAL_IP = "127.0.0.1"$/;"	v
DEFAULT_INTERNAL_PORT	defines.py	/^DEFAULT_INTERNAL_PORT = 31045  # 30242-30251$/;"	v
DEFAULT_LINK_BANDWIDTH	defines.py	/^DEFAULT_LINK_BANDWIDTH = 1000$/;"	v
DEFAULT_LINK_MTU	defines.py	/^DEFAULT_LINK_MTU = 1500 - 20 - 8$/;"	v
DEFAULT_PATH_POLICY_FILE	util/local_config_util.py	/^DEFAULT_PATH_POLICY_FILE = "topology\/PathPolicy.yml"$/;"	v
DEFAULT_PORTS	models/core.py	/^    DEFAULT_PORTS = {$/;"	v	class:Service
DEFAULT_PP_PORT	defines.py	/^DEFAULT_PP_PORT = 40002$/;"	v
DEFAULT_PS_PORT	defines.py	/^DEFAULT_PS_PORT = 31043  # 30253$/;"	v
DEFAULT_PUBLIC_PORT	defines.py	/^DEFAULT_PUBLIC_PORT = 50000    # 30042-30051 (suggested by scion\/wiki\/default-port-ranges)$/;"	v
DEFAULT_ZK_PORT	defines.py	/^DEFAULT_ZK_PORT = 2181$/;"	v
DEPLOYMENT_PERIOD	settings/common.py	/^DEPLOYMENT_PERIOD = 60$/;"	v
DISPATCHER_PORT	defines.py	/^DISPATCHER_PORT = 30041$/;"	v
DeleteASTests	tests/test_models.py	/^class DeleteASTests(TestCase):$/;"	c
DeleteUserASTests	tests/test_user_as_models.py	/^class DeleteUserASTests(TestCase):$/;"	c
DeployHostConfigTests	tests/test_huey_taskqueue.py	/^class DeployHostConfigTests(TransactionTestCase):$/;"	c
EMAIL_BACKEND	settings/development.py	/^EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'$/;"	v
EMAIL_BACKEND	settings/production.py	/^EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'$/;"	v
EMAIL_HOST	settings/production.py	/^EMAIL_HOST = 'mail.ethz.ch'$/;"	v
EMAIL_HOST_PASSWORD	settings/production.py	/^EMAIL_HOST_PASSWORD = _getenv('EMAIL_HOST_PASSWORD')$/;"	v
EMAIL_HOST_USER	settings/production.py	/^EMAIL_HOST_USER = _getenv('EMAIL_HOST_USER')$/;"	v
EMAIL_PORT	settings/production.py	/^EMAIL_PORT = 587$/;"	v
EMAIL_USE_TLS	settings/production.py	/^EMAIL_USE_TLS = True$/;"	v
FileArchiveWriter	util/archive.py	/^class FileArchiveWriter(BaseArchiveWriter):$/;"	c
GRAFANA_URL	settings/common.py	/^GRAFANA_URL = "https:\/\/prometheus.scionlab.org"$/;"	v
GenerateUserASIDTests	tests/test_user_as_models.py	/^class GenerateUserASIDTests(TestCase):$/;"	c
GenericIPNetworkField	forms/fields.py	/^class GenericIPNetworkField(forms.Field):$/;"	c
GetHostConfig	views/api.py	/^class GetHostConfig(SingleObjectMixin, View):$/;"	c
GetHostConfigExtraServicesTests	tests/test_api.py	/^class GetHostConfigExtraServicesTests(TestCase):$/;"	c
GetHostConfigTests	tests/test_api.py	/^class GetHostConfigTests(TestCase):$/;"	c
HUEY	settings/development.py	/^HUEY = huey.SqliteHuey('scionlab-huey',$/;"	v
HUEY	settings/production.py	/^HUEY = huey.RedisHuey('scionlab-huey', host='redis')$/;"	v
Host	models/core.py	/^class Host(models.Model):$/;"	c
HostAdmin	admin.py	/^class HostAdmin(HostAdminMixin, admin.ModelAdmin):$/;"	c
HostAdminForm	admin.py	/^class HostAdminForm(_CreateUpdateModelForm):$/;"	c
HostAdminMixin	admin.py	/^class HostAdminMixin:$/;"	c
HostInline	admin.py	/^class HostInline(HostAdminMixin, admin.TabularInline):$/;"	c
HostManager	models/core.py	/^class HostManager(models.Manager):$/;"	c
HttpResponseAttachment	util/http.py	/^class HttpResponseAttachment(HttpResponse):$/;"	c
HttpResponseAuthenticate	util/http.py	/^class HttpResponseAuthenticate(HttpResponse):$/;"	c
IMPORTED_USERS	tests/test_hashers.py	/^IMPORTED_USERS = [$/;"	v
INSTALLATION_TYPES	models/user_as.py	/^    INSTALLATION_TYPES = ($/;"	v	class:UserAS
INSTALLED_APPS	settings/common.py	/^INSTALLED_APPS = [$/;"	v
ISD	models/core.py	/^class ISD(TimestampedModel):$/;"	c
ISDAdmin	admin.py	/^class ISDAdmin(admin.ModelAdmin):$/;"	c
ISDdef	fixtures/testtopo.py	/^ISDdef = namedtuple('ISDdef', ['isd_id', 'label'])$/;"	v
ImportedUserTests	tests/test_hashers.py	/^class ImportedUserTests(TestCase):$/;"	c
InfrastructureASFilter	admin.py	/^    class InfrastructureASFilter(admin.SimpleListFilter):$/;"	c	class:ASAdmin
InitASTests	tests/test_models.py	/^class InitASTests(TestCase):$/;"	c
Interface	models/core.py	/^class Interface(models.Model):$/;"	c
InterfaceAdminForm	admin.py	/^class InterfaceAdminForm(_CreateUpdateModelForm):$/;"	c
InterfaceInline	admin.py	/^class InterfaceInline(admin.TabularInline):$/;"	c
InterfaceManager	models/core.py	/^class InterfaceManager(models.Manager):$/;"	c
KEYGEN_ALG	certificates.py	/^KEYGEN_ALG = 'ed25519'$/;"	v
KEY_ALTNAMES	settings/common.py	/^    KEY_ALTNAMES = "SCIONVPN"$/;"	v	class:VPNKeygenConf
KEY_BR	util/local_config_util.py	/^KEY_BR = 'BorderRouters'$/;"	v
KEY_BS	util/local_config_util.py	/^KEY_BS = 'BeaconService'$/;"	v
KEY_CITY	settings/common.py	/^    KEY_CITY = "Zurich"$/;"	v	class:VPNKeygenConf
KEY_COUNTRY	settings/common.py	/^    KEY_COUNTRY = "CH"$/;"	v	class:VPNKeygenConf
KEY_CS	util/local_config_util.py	/^KEY_CS = 'CertificateService'$/;"	v
KEY_EMAIL	settings/common.py	/^    KEY_EMAIL = "scion@lists.inf.ethz.ch"$/;"	v	class:VPNKeygenConf
KEY_EXPIRE	settings/common.py	/^    KEY_EXPIRE = 730$/;"	v	class:VPNKeygenConf
KEY_NAME	settings/common.py	/^    KEY_NAME = "SCIONVPN"$/;"	v	class:VPNKeygenConf
KEY_ORG	settings/common.py	/^    KEY_ORG = "ETH"$/;"	v	class:VPNKeygenConf
KEY_OU	settings/common.py	/^    KEY_OU = "NetSec"$/;"	v	class:VPNKeygenConf
KEY_PROVINCE	settings/common.py	/^    KEY_PROVINCE = "ZH"$/;"	v	class:VPNKeygenConf
KEY_PS	util/local_config_util.py	/^KEY_PS = 'PathService'$/;"	v
KEY_SIZE	settings/common.py	/^    KEY_SIZE = 4096$/;"	v	class:VPNKeygenConf
KEY_SIZE	settings/development.py	/^    KEY_SIZE = 1024  # Shortest workable keys for faster tests.$/;"	v	class:VPNKeygenConfDev
KEY_ZK	util/local_config_util.py	/^KEY_ZK = 'ZookeeperService'$/;"	v
LINK_TYPES	models/core.py	/^    LINK_TYPES = ($/;"	v	class:Link
LOGIN_REDIRECT_URL	settings/common.py	/^LOGIN_REDIRECT_URL = 'user'$/;"	v
LOGIN_URL	settings/common.py	/^LOGIN_URL = 'login'$/;"	v
LazyPortMap	util/portmap.py	/^class LazyPortMap:$/;"	c
Link	models/core.py	/^class Link(models.Model):$/;"	c
LinkAdmin	admin.py	/^class LinkAdmin(admin.ModelAdmin):$/;"	c
LinkAdminForm	admin.py	/^class LinkAdminForm(_CreateUpdateModelForm):$/;"	c
LinkAdminFormTests	tests/test_admin.py	/^class LinkAdminFormTests(TestCase):$/;"	c
LinkAdminViewTests	tests/test_admin.py	/^class LinkAdminViewTests(WebTest):$/;"	c
LinkDef	fixtures/testtopo.py	/^LinkDef = namedtuple('LinkDef', ['type', 'as_id_a', 'as_id_b'])$/;"	v
LinkDescription	tests/utils.py	/^LinkDescription = namedtuple('LinkDescription', [$/;"	v
LinkManager	models/core.py	/^class LinkManager(models.Manager):$/;"	c
LinkModificationTests	tests/test_models.py	/^class LinkModificationTests(TestCase):$/;"	c
LoginRequiredRedirectTests	tests/test_user.py	/^class LoginRequiredRedirectTests(TestCase):$/;"	c
MAX_ASES_ADMIN	settings/common.py	/^MAX_ASES_ADMIN = 50$/;"	v
MAX_ASES_USER	settings/common.py	/^MAX_ASES_USER = 5$/;"	v
MAX_INTERFACE_ID	defines.py	/^MAX_INTERFACE_ID = 2**12-1$/;"	v
MAX_PORT	defines.py	/^MAX_PORT = 2**16-1$/;"	v
MIDDLEWARE	settings/common.py	/^MIDDLEWARE = [$/;"	v
Meta	admin.py	/^    class Meta:$/;"	c	class:ASCreationForm
Meta	admin.py	/^    class Meta:$/;"	c	class:HostAdminForm
Meta	admin.py	/^    class Meta:$/;"	c	class:LinkAdminForm
Meta	admin.py	/^    class Meta:$/;"	c	class:VPNClientCreationForm
Meta	admin.py	/^    class Meta:$/;"	c	class:VPNCreationForm
Meta	admin.py	/^    class Meta:$/;"	c	class:VPNUpdateForm
Meta	forms/attachment_link_form.py	/^    class Meta:$/;"	c	class:AttachmentLinkForm
Meta	forms/registration_form.py	/^    class Meta(RegistrationForm.Meta):$/;"	c	class:RegistrationFormWithCaptcha
Meta	forms/user_as_form.py	/^    class Meta:$/;"	c	class:UserASForm
Meta	models/core.py	/^    class Meta:$/;"	c	class:AS
Meta	models/core.py	/^    class Meta:$/;"	c	class:Host
Meta	models/core.py	/^    class Meta:$/;"	c	class:ISD
Meta	models/core.py	/^    class Meta:$/;"	c	class:TimestampedModel
Meta	models/user_as.py	/^    class Meta:$/;"	c	class:UserAS
Meta	models/vpn.py	/^    class Meta:$/;"	c	class:VPN
Meta	models/vpn.py	/^    class Meta:$/;"	c	class:VPNClient
Migration	migrations/0001_initial.py	/^class Migration(migrations.Migration):$/;"	c
Migration	migrations/0002_auto_20190912_0946.py	/^class Migration(migrations.Migration):$/;"	c
Nlog2	util/hashers.py	/^    Nlog2 = 15  # N == 2 ** 15 == 32768$/;"	v	class:SCryptPasswordHasher
OwnedUserASQuerysetMixin	views/user_as_views.py	/^class OwnedUserASQuerysetMixin:$/;"	c
PASSWORD_HASHERS	settings/common.py	/^PASSWORD_HASHERS = [$/;"	v
PEER	models/core.py	/^    PEER = 'PEER'$/;"	v	class:Link
PP	models/core.py	/^    PP = 'PP'$/;"	v	class:Service
PROM_PORT_OFFSET	defines.py	/^PROM_PORT_OFFSET = 1000  # e.g. PS Prometheus port = PS.Public.Port + 1000 = 32043$/;"	v
PROPAGATE_TIME_CORE	defines.py	/^PROPAGATE_TIME_CORE = 60  # lower beaconing frequency in cores to save resources$/;"	v
PROPAGATE_TIME_NONCORE	defines.py	/^PROPAGATE_TIME_NONCORE = 5  # higher frequency in non-cores ASes to have quicker startup$/;"	v
PROVIDER	models/core.py	/^    PROVIDER = 'PROVIDER'$/;"	v	class:Link
PS	models/core.py	/^    PS = 'PS'$/;"	v	class:Service
PasswordWebTests	tests/test_user.py	/^class PasswordWebTests(WebTest):$/;"	c
PortMap	util/portmap.py	/^class PortMap:$/;"	c
PortMapTests	tests/test_portmap.py	/^class PortMapTests(TestCase):$/;"	c
PostHostConfigVersionTests	tests/test_api.py	/^class PostHostConfigVersionTests(TestCase):$/;"	c
PostHostDeployedConfigVersion	views/api.py	/^class PostHostDeployedConfigVersion(SingleObjectMixin, View):$/;"	c
RECAPTCHA_PRIVATE_KEY	settings/development.py	/^RECAPTCHA_PRIVATE_KEY = '6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe'$/;"	v
RECAPTCHA_PRIVATE_KEY	settings/production.py	/^RECAPTCHA_PRIVATE_KEY = _getenv('RECAPTCHA_PRIVATE_KEY')$/;"	v
RECAPTCHA_PUBLIC_KEY	settings/development.py	/^RECAPTCHA_PUBLIC_KEY = '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'$/;"	v
RECAPTCHA_PUBLIC_KEY	settings/production.py	/^RECAPTCHA_PUBLIC_KEY = _getenv('RECAPTCHA_PUBLIC_KEY')$/;"	v
REGEX	util/as_ids.py	/^REGEX = re.compile(r"^([0-9a-fA-F]{1,4}):([0-9a-fA-F]{1,4}):([0-9a-fA-F]{1,4})$")$/;"	v
REGISTRATION_OPEN	settings/common.py	/^REGISTRATION_OPEN = True  # Accept new registrations$/;"	v
REQUIRED_FIELDS	models/user.py	/^    REQUIRED_FIELDS = []$/;"	v	class:User
ROOT_URLCONF	settings/common.py	/^ROOT_URLCONF = 'scionlab.urls'$/;"	v
RegistrationFormWithCaptcha	forms/registration_form.py	/^class RegistrationFormWithCaptcha(RegistrationForm):$/;"	c
RegistrationResendForm	forms/registration_form.py	/^class RegistrationResendForm(Form):$/;"	c
RootCASetupTests	tests/test_vpn_certs.py	/^class RootCASetupTests(TestCase):$/;"	c
SCIONLAB_SITE	settings/development.py	/^SCIONLAB_SITE = 'http:\/\/localhost:8000'$/;"	v
SCIONLAB_SITE	settings/production.py	/^SCIONLAB_SITE = _getenv('SCIONLAB_SITE')$/;"	v
SCryptPasswordHasher	util/hashers.py	/^class SCryptPasswordHasher(BasePasswordHasher):$/;"	c
SCryptPasswordHasherTests	tests/test_hashers.py	/^class SCryptPasswordHasherTests(TestCase):$/;"	c
SECRET_FILE	settings/common.py	/^SECRET_FILE = os.path.join(BASE_DIR, 'run', 'SECRET.key')$/;"	v
SECRET_KEY	settings/common.py	/^        SECRET_KEY = get_random_secret_key()$/;"	v
SECRET_KEY	settings/common.py	/^    SECRET_KEY = open(SECRET_FILE).read().strip()$/;"	v
SECURE_PROXY_SSL_HEADER	settings/production.py	/^SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')$/;"	v
SERVER_CONFIG_TEMPLATE_PATH	openvpn_config.py	/^SERVER_CONFIG_TEMPLATE_PATH = os.path.join(settings.BASE_DIR, "scionlab",$/;"	v
SERVER_EMAIL	settings/production.py	/^SERVER_EMAIL = 'django@scionlab.org'$/;"	v
SERVICE_TYPES	models/core.py	/^    SERVICE_TYPES = ($/;"	v	class:Service
SERVICE_TYPES_CONTROL_PLANE	scion_config.py	/^SERVICE_TYPES_CONTROL_PLANE = [Service.BS, Service.CS, Service.PS]$/;"	v
SERVICE_TYPES_SERVER_APPS	scion_config.py	/^SERVICE_TYPES_SERVER_APPS = [Service.BW, Service.PP]$/;"	v
SSH_CONFIG_PATH	settings/common.py	/^SSH_CONFIG_PATH = os.path.join(BASE_DIR, 'run', 'ssh_config')$/;"	v
STATIC_ROOT	settings/common.py	/^STATIC_ROOT = os.path.join(BASE_DIR, 'static')$/;"	v
STATIC_URL	settings/common.py	/^STATIC_URL = '\/static\/'$/;"	v
Service	models/core.py	/^class Service(models.Model):$/;"	c
ServiceAdminForm	admin.py	/^class ServiceAdminForm(_CreateUpdateModelForm):$/;"	c
ServiceInline	admin.py	/^class ServiceInline(admin.TabularInline):$/;"	c
ServiceManager	models/core.py	/^class ServiceManager(models.Manager):$/;"	c
StringRepresentationTests	tests/test_models.py	/^class StringRepresentationTests(TestCase):$/;"	c
TEMPLATES	settings/common.py	/^TEMPLATES = [$/;"	v
TESTUSER_ADMIN_EMAIL	fixtures/testuser.py	/^TESTUSER_ADMIN_EMAIL = 'admin@scionlab.org'$/;"	v
TESTUSER_ADMIN_PWD	fixtures/testuser.py	/^TESTUSER_ADMIN_PWD = 'scion53cure'$/;"	v
TESTUSER_EMAIL	fixtures/testuser.py	/^TESTUSER_EMAIL = 'scion@scionlab.org'$/;"	v
TESTUSER_PWD	fixtures/testuser.py	/^TESTUSER_PWD = 'scion'$/;"	v
TEST_CA_CERT_PATH	tests/test_vpn_certs.py	/^TEST_CA_CERT_PATH = os.path.join(settings.BASE_DIR, 'run', 'test_root_ca_cert.pem')$/;"	v
TEST_CA_KEY_PATH	tests/test_vpn_certs.py	/^TEST_CA_KEY_PATH = os.path.join(settings.BASE_DIR, 'run', 'test_root_ca_key.pem')$/;"	v
TEST_RUNNER	settings/development.py	/^TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'$/;"	v
TRCAndCoreASCertificateTestsISD19	tests/test_certificates.py	/^class TRCAndCoreASCertificateTestsISD19(TestCase):$/;"	c
TRCAndCoreASCertificateTestsSimple	tests/test_certificates.py	/^class TRCAndCoreASCertificateTestsSimple(TestCase):$/;"	c
TRC_VALIDITY_PERIOD	certificates.py	/^TRC_VALIDITY_PERIOD = _YEAR_SECONDS$/;"	v
TYPES_TO_KEYS	util/local_config_util.py	/^TYPES_TO_KEYS = {$/;"	v
TYPE_SCION_IP4	management/commands/export_zonefile.py	/^    TYPE_SCION_IP4 = ':scionip4:'$/;"	v	class:Command
TarWriter	util/archive.py	/^class TarWriter(BaseArchiveWriter):$/;"	c
TestingConsumer	tests/test_huey_taskqueue.py	/^class TestingConsumer:$/;"	c
TimestampedModel	models/core.py	/^class TimestampedModel(models.Model):$/;"	c
USERNAME_FIELD	models/user.py	/^    USERNAME_FIELD = 'email'$/;"	v	class:User
USER_AS_ID_BEGIN	defines.py	/^USER_AS_ID_BEGIN = 0xffaa00010001  # 'ffaa:1:1'$/;"	v
USER_AS_ID_END	defines.py	/^USER_AS_ID_END = 0xffaa0001ffff  # 'ffaa:1:ffff'$/;"	v
USER_PREFIX	management/commands/export_zonefile.py	/^    USER_PREFIX = 'user-'$/;"	v	class:Command
UpdateASKeysTests	tests/test_models.py	/^class UpdateASKeysTests(TestCase):$/;"	c
UpdateUserASTests	tests/test_user_as_models.py	/^class UpdateUserASTests(TestCase):$/;"	c
User	models/user.py	/^class User(AbstractUser):$/;"	c
UserAS	models/user_as.py	/^class UserAS(AS):$/;"	c
UserASActivateTests	tests/test_user_as_views.py	/^class UserASActivateTests(WebTest):$/;"	c
UserASActivateView	views/user_as_views.py	/^class UserASActivateView(OwnedUserASQuerysetMixin, SingleObjectMixin, View):$/;"	c
UserASCreateTests	tests/test_user_as_views.py	/^class UserASCreateTests(WebTest):$/;"	c
UserASCreateView	views/user_as_views.py	/^class UserASCreateView(CreateView):$/;"	c
UserASDeleteView	views/user_as_views.py	/^class UserASDeleteView(OwnedUserASQuerysetMixin, DeleteView):$/;"	c
UserASDetailView	views/user_as_views.py	/^class UserASDetailView(OwnedUserASQuerysetMixin, UpdateView):$/;"	c
UserASForm	forms/user_as_form.py	/^class UserASForm(forms.ModelForm):$/;"	c
UserASFormTests	tests/test_user_as_views.py	/^class UserASFormTests(TestCase):$/;"	c
UserASGetConfigTests	tests/test_user_as_views.py	/^class UserASGetConfigTests(TestCase):$/;"	c
UserASGetConfigView	views/user_as_views.py	/^class UserASGetConfigView(OwnedUserASQuerysetMixin, SingleObjectMixin, View):$/;"	c
UserASManager	models/user_as.py	/^class UserASManager(models.Manager):$/;"	c
UserASPageTests	tests/test_user_as_views.py	/^class UserASPageTests(WebTest):$/;"	c
UserASesView	views/user_as_views.py	/^class UserASesView(OwnedUserASQuerysetMixin, ListView):$/;"	c
UserAdmin	admin.py	/^class UserAdmin(auth_UserAdmin):$/;"	c
UserManager	models/user.py	/^class UserManager(BaseUserManager):$/;"	c
UserRegistrationResendView	views/registration_view.py	/^class UserRegistrationResendView(RegistrationView):$/;"	c
UserRegistrationView	views/registration_view.py	/^class UserRegistrationView(RegistrationView):$/;"	c
VM	models/user_as.py	/^    VM = 'VM'$/;"	v	class:UserAS
VPN	models/vpn.py	/^class VPN(models.Model):$/;"	c
VPNAdmin	admin.py	/^class VPNAdmin(admin.ModelAdmin):$/;"	c
VPNCertsMissingCATests	tests/test_vpn_certs.py	/^class VPNCertsMissingCATests(TestCase):$/;"	c
VPNCertsTests	tests/test_vpn_certs.py	/^class VPNCertsTests(TestCase):$/;"	c
VPNClient	models/vpn.py	/^class VPNClient(models.Model):$/;"	c
VPNClientAdmin	admin.py	/^class VPNClientAdmin(admin.ModelAdmin):$/;"	c
VPNClientCreationForm	admin.py	/^class VPNClientCreationForm(_CreateUpdateModelForm):$/;"	c
VPNClientManager	models/vpn.py	/^class VPNClientManager(models.Manager):$/;"	c
VPNCreationForm	admin.py	/^class VPNCreationForm(_CreateUpdateModelForm):$/;"	c
VPNDef	fixtures/testtopo.py	/^VPNDef = namedtuple('VPNDef', ['server', 'vpn_ip', 'vpn_port', 'subnet', 'AP'])$/;"	v
VPNKeygenConf	settings/common.py	/^class VPNKeygenConf:$/;"	c
VPNKeygenConfDev	settings/development.py	/^class VPNKeygenConfDev(VPNKeygenConf):$/;"	c
VPNManager	models/vpn.py	/^class VPNManager(models.Manager):$/;"	c
VPNServerTests	tests/test_user_as_models.py	/^class VPNServerTests(TestCase):$/;"	c
VPNUpdateForm	admin.py	/^class VPNUpdateForm(VPNCreationForm):$/;"	c
VPN_CA_CERT_PATH	settings/common.py	/^VPN_CA_CERT_PATH = os.path.join(BASE_DIR, 'run', 'root_ca_cert.pem')$/;"	v
VPN_CA_CERT_PATH	settings/development.py	/^VPN_CA_CERT_PATH = os.path.join(BASE_DIR, 'run', 'dev_root_ca_cert.pem')$/;"	v
VPN_CA_KEY_PASSWORD	settings/common.py	/^VPN_CA_KEY_PASSWORD = os.environ.get('VPN_CA_KEY_PASSWORD')$/;"	v
VPN_CA_KEY_PASSWORD	settings/development.py	/^VPN_CA_KEY_PASSWORD = 'sci0nl4b'$/;"	v
VPN_CA_KEY_PATH	settings/common.py	/^VPN_CA_KEY_PATH = os.path.join(BASE_DIR, 'run', 'root_ca_key.pem')$/;"	v
VPN_CA_KEY_PATH	settings/development.py	/^VPN_CA_KEY_PATH = os.path.join(BASE_DIR, 'run', 'dev_root_ca_key.pem')$/;"	v
VPN_KEYGEN_CONFIG	settings/common.py	/^VPN_KEYGEN_CONFIG = VPNKeygenConf()$/;"	v
VPN_KEYGEN_CONFIG	settings/development.py	/^VPN_KEYGEN_CONFIG = VPNKeygenConfDev$/;"	v
ZK	models/core.py	/^    ZK = 'ZK'$/;"	v	class:Service
_AlwaysChangedModelForm	admin.py	/^class _AlwaysChangedModelForm(forms.ModelForm):$/;"	c
_BAD_VERSION	views/api.py	/^_BAD_VERSION = object()$/;"	v
_CreateUpdateModelForm	admin.py	/^class _CreateUpdateModelForm(_AlwaysChangedModelForm):$/;"	c
_HOSTFILES_DIR	config_tar.py	/^_HOSTFILES_DIR = os.path.join(settings.BASE_DIR, "scionlab", "hostfiles")$/;"	v
_MAX_LEN_CHOICES_DEFAULT	models/core.py	/^_MAX_LEN_CHOICES_DEFAULT = 16$/;"	v
_MAX_LEN_CHOICES_DEFAULT	models/user_as.py	/^_MAX_LEN_CHOICES_DEFAULT = 16$/;"	v
_MAX_LEN_DEFAULT	models/core.py	/^_MAX_LEN_DEFAULT = 255$/;"	v
_MAX_LEN_KEYS	models/core.py	/^_MAX_LEN_KEYS = 255$/;"	v
_NO_USER_AS_MESSAGE	tests/test_user_as_views.py	/^_NO_USER_AS_MESSAGE = 'You currently have no registered SCIONLab ASes'$/;"	v
_PARAMETERIZED_TEST_IPS	tests/test_portmap.py	/^_PARAMETERIZED_TEST_IPS = [('127.0.0.1',), (None,)]$/;"	v
_QUOTA_EXCEEDED_MESSAGE	tests/test_user_as_views.py	/^_QUOTA_EXCEEDED_MESSAGE = ('You have reached the maximum number of ASes '$/;"	v
_SLEEP_PERIOD	tests/test_huey_taskqueue.py	/^_SLEEP_PERIOD = 0.01$/;"	v
_TEST_DEPLOYMENT_PERIOD	tests/test_huey_taskqueue.py	/^_TEST_DEPLOYMENT_PERIOD = 3$/;"	v
_VAGRANT_VM_LOCAL_IP	models/user_as.py	/^_VAGRANT_VM_LOCAL_IP = '10.0.2.15'$/;"	v
_YEAR_SECONDS	certificates.py	/^_YEAR_SECONDS = 365 * 24 * 60 * 60$/;"	v
__init__	admin.py	/^    def __init__(self, data=None, files=None, initial=None, instance=None, **kwargs):$/;"	m	class:LinkAdminForm
__init__	admin.py	/^    def __init__(self, instance=None, *args, **kwargs):$/;"	m	class:ServiceAdminForm
__init__	forms/attachment_link_form.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:AttachmentLinkForm
__init__	forms/fields.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:GenericIPNetworkField
__init__	forms/registration_form.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:RegistrationFormWithCaptcha
__init__	forms/user_as_form.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:UserASForm
__init__	tests/test_huey_taskqueue.py	/^    def __init__(self):$/;"	m	class:TestingConsumer
__init__	util/archive.py	/^    def __init__(self, root):$/;"	m	class:FileArchiveWriter
__init__	util/archive.py	/^    def __init__(self, tar):$/;"	m	class:TarWriter
__init__	util/http.py	/^    def __init__(self, filename, *args, **kwargs):$/;"	m	class:HttpResponseAttachment
__init__	util/http.py	/^    def __init__(self, realm, *args, **kwargs):$/;"	m	class:HttpResponseAuthenticate
__init__	util/portmap.py	/^    def __init__(self):$/;"	m	class:PortMap
__init__	util/portmap.py	/^    def __init__(self, factory):$/;"	m	class:LazyPortMap
__init__	views/user_as_views.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:AttachmentLinksFormSet
__init__	views/user_as_views.py	/^    def __init__(self, active, *args, **kwargs):$/;"	m	class:UserASActivateView
__str__	models/core.py	/^    def __str__(self):$/;"	m	class:AS	file:
__str__	models/core.py	/^    def __str__(self):$/;"	m	class:Host	file:
__str__	models/core.py	/^    def __str__(self):$/;"	m	class:ISD	file:
__str__	models/core.py	/^    def __str__(self):$/;"	m	class:Interface	file:
__str__	models/core.py	/^    def __str__(self):$/;"	m	class:Link	file:
__str__	models/user_as.py	/^    def __str__(self):$/;"	m	class:AttachmentPoint	file:
__str__	models/vpn.py	/^    def __str__(self):$/;"	m	class:VPN	file:
__str__	models/vpn.py	/^    def __str__(self):$/;"	m	class:VPNClient	file:
_add_as_node	views/topology.py	/^def _add_as_node(g, as_):$/;"	f
_add_attachment_point_data	views/user_as_views.py	/^def _add_attachment_point_data(context):$/;"	f
_add_config_info	config_tar.py	/^def _add_config_info(host, tar):$/;"	f
_add_link	views/topology.py	/^def _add_link(g, link):$/;"	f
_add_port	tests/utils.py	/^    def _add_port(ip, port):$/;"	f	function:check_host_ports
_add_vagrantfiles	config_tar.py	/^def _add_vagrantfiles(host, tar):$/;"	f
_add_vpn_config	config_tar.py	/^def _add_vpn_config(host, tar):$/;"	f
_as_a	tests/test_models.py	/^    def _as_a(self):$/;"	m	class:LinkModificationTests
_as_b	tests/test_models.py	/^    def _as_b(self):$/;"	m	class:LinkModificationTests
_as_c	tests/test_models.py	/^    def _as_c(self):$/;"	m	class:LinkModificationTests
_as_color	views/topology.py	/^def _as_color(as_):$/;"	f
_as_label	views/topology.py	/^def _as_label(as_):$/;"	f
_as_post_delete	models/core.py	/^def _as_post_delete(sender, instance, using, **kwargs):$/;"	f
_assert_pwd_algo_not_scrypt	tests/test_hashers.py	/^    def _assert_pwd_algo_not_scrypt(self, email):$/;"	m	class:ImportedUserTests
_assert_pwd_algo_scrypt	tests/test_hashers.py	/^    def _assert_pwd_algo_scrypt(self, email):$/;"	m	class:ImportedUserTests
_authenticate_host	views/api.py	/^def _authenticate_host(uid, secret):$/;"	f
_b64dec	util/hashers.py	/^def _b64dec(string):$/;"	f
_b64enc	util/hashers.py	/^def _b64enc(bytes):$/;"	f
_base64encode	models/core.py	/^def _base64encode(key):$/;"	f
_base64encode_dict	certificates.py	/^def _base64encode_dict(dict_):$/;"	f
_base64encode_tuple	models/core.py	/^def _base64encode_tuple(keys):$/;"	f
_basicauth_host	views/api.py	/^_basicauth_host = basicauth(_authenticate_host, realm='host')$/;"	v
_build_common_goservice_conf	util/local_config_util.py	/^def _build_common_goservice_conf(instance_name, instance_path):$/;"	f
_build_cs_conf	util/local_config_util.py	/^def _build_cs_conf(instance_name, instance_path):$/;"	f
_build_ps_conf	util/local_config_util.py	/^def _build_ps_conf(instance_name, instance_path):$/;"	f
_build_sciond_conf	util/local_config_util.py	/^def _build_sciond_conf(instance_name, instance_path, ia):$/;"	f
_bump_affected	models/core.py	/^    def _bump_affected(host, type, prev_host=None):$/;"	m	class:Service
_cert_chain_filename	util/local_config_util.py	/^def _cert_chain_filename(as_, version):$/;"	f
_change_ap	tests/test_user_as_models.py	/^    def _change_ap(self, user_as, attachment_point):$/;"	m	class:UpdateUserASTests
_change_isd	models/core.py	/^    def _change_isd(self, isd):$/;"	m	class:AS
_check_attachment_point	tests/test_user_as_models.py	/^def _check_attachment_point(testcase, attachment_point):$/;"	f
_check_execution_log	tests/test_huey_taskqueue.py	/^    def _check_execution_log(self, host):$/;"	m	class:DeployHostConfigTests
_check_host_needs_config_deployment	tasks.py	/^def _check_host_needs_config_deployment(host_id):$/;"	f
_check_link	models/core.py	/^    def _check_link(self, type, as_a, as_b):$/;"	m	class:LinkManager
_check_open_tarball	tests/utils.py	/^def _check_open_tarball(testcase, response):$/;"	f
_check_port	tests/utils.py	/^def _check_port(testcase, port):$/;"	f
_check_tarball_gen	tests/utils.py	/^def _check_tarball_gen(testcase, tar, host):$/;"	f
_create_as	fixtures/testtopo.py	/^def _create_as(isd_id, as_id, label, public_ip, is_core=False, is_ap=False):$/;"	f
_create_as_link	fixtures/testtopo.py	/^def _create_as_link(type, as_id_a, as_id_b):$/;"	f
_create_ases_for_testuser	tests/test_user_as_views.py	/^def _create_ases_for_testuser(num):$/;"	f
_create_gen	scion_config.py	/^def _create_gen(host, archive, topo_dict, router_names, service_names):$/;"	f
_create_or_activate_vpn_client	models/user_as.py	/^    def _create_or_activate_vpn_client(self, vpn):$/;"	m	class:UserAS
_create_user	models/user.py	/^    def _create_user(self, email, password, **extra_fields):$/;"	m	class:UserManager
_create_user_as	tests/test_huey_taskqueue.py	/^def _create_user_as(attachment_point, label="Some label"):$/;"	f
_create_vpn	fixtures/testtopo.py	/^def _create_vpn(server, vpn_ip, vpn_port, subnet, AP):$/;"	f
_crispy_helper	forms/attachment_link_form.py	/^    def _crispy_helper(self):$/;"	m	class:AttachmentLinkForm
_crispy_helper	forms/registration_form.py	/^    def _crispy_helper(self):$/;"	m	class:RegistrationFormWithCaptcha
_deploy_host_config	tasks.py	/^def _deploy_host_config(ssh_host, host_id, host_secret):$/;"	f
_describe_link	tests/utils.py	/^def _describe_link(link):$/;"	f
_diff_link_description	tests/utils.py	/^def _diff_link_description(link_desc, actual_link_desc):$/;"	f
_dont_care	tests/utils.py	/^_dont_care = object()$/;"	v
_elem_dir	util/local_config_util.py	/^def _elem_dir(as_, elem_id):$/;"	f
_encoded	certificates.py	/^    def _encoded(val):$/;"	f	function:_base64encode_dict
_expand_as_id	fixtures/testtopo.py	/^def _expand_as_id(as_id_tail):$/;"	f
_expand_vagrantfile_template	config_tar.py	/^def _expand_vagrantfile_template(host):$/;"	f
_fake_check_deployment_required	tests/test_huey_taskqueue.py	/^def _fake_check_deployment_required(host_id):$/;"	f
_fake_invoke_ssh_scionlab_config	tests/test_huey_taskqueue.py	/^def _fake_invoke_ssh_scionlab_config(ssh_host, host_id, host_secret):$/;"	f
_fake_notify_deploy_success	tests/test_huey_taskqueue.py	/^def _fake_notify_deploy_success(host_id, host_secret):$/;"	f
_fill_form	tests/test_user_as_views.py	/^    def _fill_form(form, **kwargs):$/;"	m	class:UserASCreateTests
_find_client_ip	models/vpn.py	/^    def _find_client_ip(self):$/;"	m	class:VPN
_find_free_port	util/portmap.py	/^    def _find_free_port(self, ip, min, max, preferred):$/;"	m	class:PortMap
_find_service_port	models/core.py	/^    def _find_service_port(host, type):$/;"	m	class:Service
_format	util/hashers.py	/^    def _format(self, Nlog2, r, p, salt, hash):$/;"	m	class:SCryptPasswordHasher
_gen_core_keys	models/core.py	/^    def _gen_core_keys(self):$/;"	m	class:AS
_gen_enc_keypair	models/core.py	/^def _gen_enc_keypair():$/;"	f
_gen_keys	models/core.py	/^    def _gen_keys(self):$/;"	m	class:AS
_gen_master_as_key	models/core.py	/^    def _gen_master_as_key(self):$/;"	m	class:AS
_gen_sig_keypair	models/core.py	/^def _gen_sig_keypair():$/;"	f
_generate_config_info_json	config_tar.py	/^def _generate_config_info_json(host):$/;"	f
_generate_private_key	openvpn_config.py	/^def _generate_private_key():$/;"	f
_generate_root_ca_cert	openvpn_config.py	/^def _generate_root_ca_cert(key):$/;"	f
_generate_topology_from_DB	scion_config.py	/^def _generate_topology_from_DB(as_):$/;"	f
_get_ap_link	models/user_as.py	/^    def _get_ap_link(self):$/;"	m	class:UserAS
_get_auth_headers	tests/test_api.py	/^    def _get_auth_headers(host):$/;"	m	class:GetHostConfigExtraServicesTests
_get_host_for_useras_attachment	models/user_as.py	/^    def _get_host_for_useras_attachment(self):$/;"	m	class:AttachmentPoint
_get_initial_dict	tests/test_user_as_views.py	/^    def _get_initial_dict(self):$/;"	m	class:UserASFormTests
_get_interface_form_data	admin.py	/^    def _get_interface_form_data(self, prefix):$/;"	m	class:LinkAdminForm
_get_ip_type_str	scion_config.py	/^def _get_ip_type_str(ip):$/;"	f
_get_link_overlay_type_str	scion_config.py	/^def _get_link_overlay_type_str(interface):$/;"	f
_get_linkto_relation	scion_config.py	/^def _get_linkto_relation(interface):$/;"	f
_get_local_info	models/core.py	/^    def _get_local_info(self):$/;"	m	class:Interface
_get_public_info	models/core.py	/^    def _get_public_info(self):$/;"	m	class:Interface
_get_public_ip_testtopo	tests/test_user_as_models.py	/^def _get_public_ip_testtopo(as_id):$/;"	f
_get_random_useras_params	tests/test_user_as_models.py	/^def _get_random_useras_params(seed, force_public_ip=False, force_bind_ip=False, **kwargs):$/;"	f
_get_router_names	scion_config.py	/^def _get_router_names(as_):$/;"	f
_get_service_names	scion_config.py	/^def _get_service_names(as_, service_types):$/;"	f
_get_url	tests/test_api.py	/^    def _get_url(host):$/;"	m	class:GetHostConfigExtraServicesTests
_get_user_pwd	tests/test_hashers.py	/^    def _get_user_pwd(self, email):$/;"	m	class:ImportedUserTests
_get_version_param	views/api.py	/^def _get_version_param(request_params):$/;"	f
_getenv	settings/production.py	/^def _getenv(key):$/;"	f
_hostfiles_path	config_tar.py	/^def _hostfiles_path(filename):$/;"	f
_init_default_form_data	admin.py	/^    def _init_default_form_data(self, initial, prefix):$/;"	m	class:LinkAdminForm
_init_interface_form_data	admin.py	/^    def _init_interface_form_data(self, initial, interface, prefix):$/;"	m	class:LinkAdminForm
_interface_pre_delete	models/core.py	/^def _interface_pre_delete(sender, instance, using, **kwargs):$/;"	f
_invoke_ssh_scionlab_config	tasks.py	/^def _invoke_ssh_scionlab_config(ssh_host, host_id, host_secret):$/;"	f
_isd_as_dir	util/local_config_util.py	/^def _isd_as_dir(as_):$/;"	f
_isd_label	views/topology.py	/^def _isd_label(isd):$/;"	f
_key_deploy_host_running	tasks.py	/^def _key_deploy_host_running(host_id):$/;"	f
_key_deploy_host_triggered	tasks.py	/^def _key_deploy_host_triggered(host_id):$/;"	f
_link_post_delete	models/core.py	/^def _link_post_delete(sender, instance, using, **kwargs):$/;"	f
_make_cert	openvpn_config.py	/^def _make_cert(subject_name, subject_key, issuer_name, issuer_key,$/;"	f
_make_isd_graph	views/topology.py	/^def _make_isd_graph(isd):$/;"	f
_make_name	openvpn_config.py	/^def _make_name(common_name):$/;"	f
_make_supervisord_conf	util/local_config_util.py	/^def _make_supervisord_conf(name, cmd, envs, priority=100, startsecs=5):$/;"	f
_max_id	models/user_as.py	/^    def _max_id(self):$/;"	m	class:UserASManager
_normalize_path	util/archive.py	/^    def _normalize_path(self, path):$/;"	m	class:BaseArchiveWriter
_parse	util/hashers.py	/^    def _parse(self, encoded):$/;"	m	class:SCryptPasswordHasher
_parse_basic_auth	util/http.py	/^def _parse_basic_auth(request):$/;"	f
_peek_deploy_host_ongoing	tests/test_huey_taskqueue.py	/^def _peek_deploy_host_ongoing(host_id):$/;"	f
_peek_deploy_host_triggered	tests/test_huey_taskqueue.py	/^def _peek_deploy_host_triggered(host_id):$/;"	f
_placeholder	models/core.py	/^_placeholder = object()$/;"	v
_post_clean	admin.py	/^    def _post_clean(self):$/;"	m	class:_CreateUpdateModelForm
_post_delete	models/core.py	/^    def _post_delete(self):$/;"	m	class:AS
_post_delete	models/core.py	/^    def _post_delete(self):$/;"	m	class:Link
_pre_delete	models/core.py	/^    def _pre_delete(self):$/;"	m	class:Interface
_pre_delete	models/core.py	/^    def _pre_delete(self):$/;"	m	class:Service
_pre_delete	models/vpn.py	/^    def _pre_delete(self):$/;"	m	class:VPN
_pre_delete	models/vpn.py	/^    def _pre_delete(self):$/;"	m	class:VPNClient
_put_if_empty	tasks.py	/^def _put_if_empty(key, value):$/;"	f
_queue_or_trigger	tasks.py	/^def _queue_or_trigger(ssh_host, host_id, host_secret):$/;"	f
_randbool	tests/test_user_as_models.py	/^    def _randbool():$/;"	f	function:_get_random_useras_params
_reset_trc_and_certificates	tests/test_certificates.py	/^def _reset_trc_and_certificates(isd):$/;"	f
_sanity_check_base64	tests/utils.py	/^def _sanity_check_base64(testcase, s):$/;"	f
_sanity_check_interface	tests/test_models.py	/^    def _sanity_check_interface(self, interface):$/;"	m	class:LinkModificationTests
_sanity_check_link	tests/test_models.py	/^    def _sanity_check_link(self, link):$/;"	m	class:LinkModificationTests
_scionlab_host	settings/production.py	/^_scionlab_host = re.sub(r'^\\w+:\/\/|:\\d+$', '', SCIONLAB_SITE)$/;"	v
_service_pre_delete	models/core.py	/^def _service_pre_delete(sender, instance, using, **kwargs):$/;"	f
_setup_vpn_attachment_point	tests/test_user_as_views.py	/^def _setup_vpn_attachment_point():$/;"	f
_setup_vpn_attachment_point	tests/test_vpn_certs.py	/^def _setup_vpn_attachment_point():$/;"	f
_subdomain	settings/production.py	/^_subdomain = re.sub(r'\\.?scionlab\\.org$', '', _scionlab_host)$/;"	v
_tar_cat	tests/utils.py	/^def _tar_cat(tar, path):$/;"	f
_tar_ls	tests/utils.py	/^def _tar_ls(tar, path):$/;"	f
_test_ip	tests/test_user_as_views.py	/^_test_ip = '192.1.2.111'$/;"	v
_test_ipv6	tests/test_user_as_views.py	/^_test_ipv6 = '2a00:1450:400a:801::2004'$/;"	v
_test_start_port	tests/test_user_as_views.py	/^_test_start_port = 50000$/;"	v
_topo_add_control_services	scion_config.py	/^def _topo_add_control_services(topo_dict, service_names, as_address_type):$/;"	f
_topo_add_interface	scion_config.py	/^def _topo_add_interface(router_entry, interface):$/;"	f
_topo_add_router_entry	scion_config.py	/^def _topo_add_router_entry(topo_dict, router, router_name, as_address_type):$/;"	f
_topo_add_routers	scion_config.py	/^def _topo_add_routers(topo_dict, routers, as_address_type):$/;"	f
_topo_add_zookeeper	scion_config.py	/^def _topo_add_zookeeper(topo_dict, as_):$/;"	f
_topology_graph	views/topology.py	/^def _topology_graph():$/;"	f
_trc_filename	util/local_config_util.py	/^def _trc_filename(isd, version):$/;"	f
_update_as_certificates	models/core.py	/^    def _update_as_certificates(as_):$/;"	m	class:ISD
_update_as_host_router	models/core.py	/^    def _update_as_host_router(self, border_router):$/;"	m	class:Interface
_update_coreas_certificates	models/core.py	/^    def _update_coreas_certificates(as_):$/;"	m	class:ISD
_update_ports	models/core.py	/^    def _update_ports(self, internal_port, control_port, host_changed):$/;"	m	class:BorderRouter
_update_ports	models/core.py	/^    def _update_ports(self, public_port, bind_port,$/;"	m	class:Interface
_update_trc	models/core.py	/^    def _update_trc(self):$/;"	m	class:ISD
_verify_deploy_task	tests/test_huey_taskqueue.py	/^    def _verify_deploy_task(self, host, task_name, task_args):$/;"	m	class:DeployHostConfigTests
_vpn_client_pre_delete	models/vpn.py	/^def _vpn_client_pre_delete(sender, instance, using, **kwargs):$/;"	f
_vpn_pre_delete	models/vpn.py	/^def _vpn_pre_delete(sender, instance, using, **kwargs):$/;"	f
_wrapped	util/portmap.py	/^    def _wrapped(self):$/;"	m	class:LazyPortMap
_write_as_conf_and_path_policy	util/local_config_util.py	/^def _write_as_conf_and_path_policy(archive, elem_dir, as_):$/;"	f
_write_certs_trc	util/local_config_util.py	/^def _write_certs_trc(archive, elem_dir, as_):$/;"	f
_write_keys	util/local_config_util.py	/^def _write_keys(archive, elem_dir, as_):$/;"	f
_write_topo	util/local_config_util.py	/^def _write_topo(archive, elem_dir, tp):$/;"	f
abstract	models/core.py	/^        abstract = True$/;"	v	class:TimestampedModel.Meta
actions	admin.py	/^    actions = ['trigger_config_deployment']$/;"	v	class:HostAdmin
actions	admin.py	/^    actions = ['update_keys', 'update_core_keys', 'trigger_config_deployment']$/;"	v	class:ASAdmin
active	admin.py	/^    def active(self, obj):$/;"	m	class:InterfaceInline
active	models/core.py	/^    active = models.BooleanField(default=True)$/;"	v	class:Link
active	models/core.py	/^    def active(self):$/;"	m	class:InterfaceManager
active	models/vpn.py	/^    active = models.BooleanField(default=True)$/;"	v	class:VPNClient
active	views/user_as_views.py	/^    active = None$/;"	v	class:UserASActivateView
add	tests/test_huey_taskqueue.py	/^def add(a, b):$/;"	f
add	util/portmap.py	/^    def add(self, *args, **kwargs):$/;"	m	class:LazyPortMap
add	util/portmap.py	/^    def add(self, ip, port):$/;"	m	class:PortMap
add_arguments	management/commands/export_zonefile.py	/^    def add_arguments(self, parser):$/;"	m	class:Command
add_fieldsets	admin.py	/^    add_fieldsets = ($/;"	v	class:UserAdmin
algorithm	util/hashers.py	/^    algorithm = "scrypt"$/;"	v	class:SCryptPasswordHasher
application	wsgi.py	/^application = get_wsgi_application()$/;"	v
as_id	models/core.py	/^    as_id = models.CharField($/;"	v	class:AS
as_id_int	models/core.py	/^    as_id_int = models.BigIntegerField(editable=False)$/;"	v	class:AS
as_path_str	models/core.py	/^    def as_path_str(self):$/;"	m	class:AS
as_str	tests/test_user_as_views.py	/^        def as_str(as_def):$/;"	f	function:UserASCreateTests.get_ap_strs
ases	fixtures/testtopo.py	/^ases = [$/;"	v
attachment_point	forms/attachment_link_form.py	/^    attachment_point = forms.ModelChoiceField(queryset=AttachmentPoint.objects)$/;"	v	class:AttachmentLinkForm
bandwidth	models/core.py	/^    bandwidth = models.PositiveIntegerField(default=DEFAULT_LINK_BANDWIDTH)$/;"	v	class:Link
bases	migrations/0001_initial.py	/^            bases=('scionlab.as',),$/;"	v	class:Migration
basic_auth	tests/utils.py	/^def basic_auth(username, password):$/;"	f
basicauth	util/http.py	/^def basicauth(authenticate, realm=""):$/;"	f
bind_ip	admin.py	/^    bind_ip = forms.GenericIPAddressField(required=False)$/;"	v	class:ASCreationForm
bind_ip	forms/attachment_link_form.py	/^    bind_ip = forms.GenericIPAddressField($/;"	v	class:AttachmentLinkForm
bind_ip	forms/user_as_form.py	/^    bind_ip = forms.GenericIPAddressField($/;"	v	class:UserASForm
bind_ip	models/core.py	/^    bind_ip = models.GenericIPAddressField($/;"	v	class:Host
bind_ip	models/core.py	/^    bind_ip = models.GenericIPAddressField($/;"	v	class:Interface
bind_ip_	admin.py	/^    def bind_ip_(self, obj):$/;"	m	class:InterfaceInline
bind_ip_a	admin.py	/^    def bind_ip_a(self, obj):$/;"	m	class:LinkAdmin
bind_ip_b	admin.py	/^    def bind_ip_b(self, obj):$/;"	m	class:LinkAdmin
bind_port	forms/attachment_link_form.py	/^    bind_port = forms.IntegerField($/;"	v	class:AttachmentLinkForm
bind_port	models/core.py	/^    bind_port = models.PositiveIntegerField(null=True, blank=True)$/;"	v	class:Interface
bind_port_a	admin.py	/^    def bind_port_a(self, obj):$/;"	m	class:LinkAdmin
bind_port_b	admin.py	/^    def bind_port_b(self, obj):$/;"	m	class:LinkAdmin
blank	models/core.py	/^        blank=True$/;"	v	class:AS
blank	models/core.py	/^        blank=True,$/;"	v	class:Host
blank	models/core.py	/^        blank=True,$/;"	v	class:ISD
blank	models/core.py	/^        blank=True,$/;"	v	class:Interface
blank	models/user_as.py	/^        blank=True,$/;"	v	class:AttachmentPoint
border_router	models/core.py	/^    border_router = models.ForeignKey($/;"	v	class:Interface
bump_config	models/core.py	/^    def bump_config(self):$/;"	m	class:Host
bump_config	models/core.py	/^    def bump_config(self):$/;"	m	class:HostManager
captcha	forms/login_form.py	/^    captcha = ReCaptchaField(widget=ReCaptchaWidget(explicit=True, container_id='recaptcha-id'))$/;"	v	class:AuthenticationFormWithCaptcha
captcha	forms/registration_form.py	/^    captcha = ReCaptchaField(widget=ReCaptchaWidget(explicit=True, container_id='recaptcha-id'))$/;"	v	class:RegistrationFormWithCaptcha
ccd_config	openvpn_config.py	/^def ccd_config(vpn_client):$/;"	f
cert	models/vpn.py	/^    cert = models.TextField(null=True, blank=True)$/;"	v	class:VPN
cert	models/vpn.py	/^    cert = models.TextField(null=True, blank=True)$/;"	v	class:VPNClient
certificate_chain	models/core.py	/^    certificate_chain = jsonfield.JSONField(null=True, blank=True)$/;"	v	class:AS
check_active	tests/test_user_as_views.py	/^        def check_active(active, user_as, edit_page):$/;"	f	function:UserASActivateTests.test_cycle_active
check_as	tests/utils.py	/^def check_as(testcase, as_):$/;"	f
check_as_core_keys	tests/utils.py	/^def check_as_core_keys(testcase, as_):$/;"	f
check_as_keys	tests/utils.py	/^def check_as_keys(testcase, as_):$/;"	f
check_as_link_count	tests/test_user_as_views.py	/^        def check_as_link_count(user_page, expected_count):$/;"	f	function:UserASPageTests.test_as_listing
check_as_quota	models/user.py	/^    def check_as_quota(self):$/;"	m	class:User
check_as_services	tests/utils.py	/^def check_as_services(testcase, as_):$/;"	f
check_cert_chain	tests/utils.py	/^def check_cert_chain(testcase, as_, trc):$/;"	f
check_core_as_certs	tests/utils.py	/^def check_core_as_certs(testcase, isd):$/;"	f
check_core_cert	tests/utils.py	/^def check_core_cert(testcase, as_, trc):$/;"	f
check_enc_keypair	tests/utils.py	/^def check_enc_keypair(testcase, enc_pub_key_b64, enc_priv_key_b64):$/;"	f
check_host_ports	tests/utils.py	/^def check_host_ports(testcase, host):$/;"	f
check_interfaces	tests/utils.py	/^def check_interfaces(testcase):$/;"	f
check_link	tests/utils.py	/^def check_link(testcase, link, link_desc=None):$/;"	f
check_links	tests/utils.py	/^def check_links(testcase, link_descriptions):$/;"	f
check_no_dangling_interfaces	tests/utils.py	/^def check_no_dangling_interfaces(testcase):$/;"	f
check_noncore_as_certs	tests/utils.py	/^def check_noncore_as_certs(testcase, isd):$/;"	f
check_random_useras	tests/test_user_as_models.py	/^def check_random_useras(testcase, user_as, seed, **kwargs):$/;"	f
check_sig_keypair	tests/utils.py	/^def check_sig_keypair(testcase, sig_pub_key_b64, sig_priv_key_b64):$/;"	f
check_system_files	hostfiles/scion_upgrade_script.sh	/^check_system_files() {$/;"	f
check_tarball_files_exist	tests/utils.py	/^def check_tarball_files_exist(testcase, response, files):$/;"	f
check_tarball_host	tests/utils.py	/^def check_tarball_host(testcase, response, host):$/;"	f
check_tarball_user_as	tests/utils.py	/^def check_tarball_user_as(testcase, response, user_as):$/;"	f
check_topology	tests/utils.py	/^def check_topology(testcase):$/;"	f
check_trc	tests/utils.py	/^def check_trc(testcase, isd, expected_core_ases=None, expected_version=None, prev_trc=None):$/;"	f
check_trc_and_certs	tests/utils.py	/^def check_trc_and_certs(testcase, isd_id, expected_core_ases=None, expected_version=None,$/;"	f
check_useras	tests/test_user_as_models.py	/^def check_useras(testcase,$/;"	f
check_vpn_available	models/user_as.py	/^    def check_vpn_available(self):$/;"	m	class:AttachmentPoint
choices	models/core.py	/^        choices=LINK_TYPES,$/;"	v	class:Link
choices	models/core.py	/^        choices=SERVICE_TYPES,$/;"	v	class:Service
choices	models/user_as.py	/^        choices=INSTALLATION_TYPES,$/;"	v	class:UserAS
clean	admin.py	/^    def clean(self):$/;"	m	class:VPNCreationForm
clean	forms/attachment_link_form.py	/^    def clean(self):$/;"	m	class:AttachmentLinkForm
clean	forms/user_as_form.py	/^    def clean(self):$/;"	m	class:UserASForm
clean	models/core.py	/^    def clean(self):$/;"	m	class:Interface
clean	models/vpn.py	/^    def clean(self):$/;"	m	class:VPN
clean	views/user_as_views.py	/^    def clean(self):$/;"	m	class:AttachmentLinksFormSet
common_name	models/vpn.py	/^    def common_name(self):$/;"	m	class:VPNClient
config_version	models/core.py	/^    config_version = models.PositiveIntegerField(default=1)$/;"	v	class:Host
config_version_deployed	models/core.py	/^    config_version_deployed = models.PositiveIntegerField(default=0)$/;"	v	class:Host
control_port	models/core.py	/^    control_port = models.PositiveIntegerField(blank=True)$/;"	v	class:BorderRouter
core_certificate	models/core.py	/^    core_certificate = jsonfield.JSONField(null=True, blank=True)$/;"	v	class:AS
core_offline_priv_key	models/core.py	/^    core_offline_priv_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
core_offline_pub_key	models/core.py	/^    core_offline_pub_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
core_online_priv_key	models/core.py	/^    core_online_priv_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
core_online_pub_key	models/core.py	/^    core_online_pub_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
core_sig_priv_key	models/core.py	/^    core_sig_priv_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
core_sig_pub_key	models/core.py	/^    core_sig_pub_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
create	admin.py	/^    def create(self):$/;"	m	class:ASCreationForm
create	admin.py	/^    def create(self):$/;"	m	class:BorderRouterAdminForm
create	admin.py	/^    def create(self):$/;"	m	class:HostAdminForm
create	admin.py	/^    def create(self):$/;"	m	class:LinkAdminForm
create	admin.py	/^    def create(self):$/;"	m	class:ServiceAdminForm
create	admin.py	/^    def create(self):$/;"	m	class:VPNClientCreationForm
create	admin.py	/^    def create(self):$/;"	m	class:VPNCreationForm
create	admin.py	/^    def create(self):$/;"	m	class:_CreateUpdateModelForm
create	models/core.py	/^    def create(self, host, internal_port=None, control_port=None):$/;"	m	class:BorderRouterManager
create	models/core.py	/^    def create(self, host, type, port=None):$/;"	m	class:ServiceManager
create	models/core.py	/^    def create(self, isd, as_id, is_core=False, label=None, mtu=None, owner=None,$/;"	m	class:ASManager
create	models/core.py	/^    def create(self, type, interfaceA, interfaceB, active=True, bandwidth=None, mtu=None):$/;"	m	class:LinkManager
create	models/core.py	/^    def create(self, uid=None, secret=None, **kwargs):$/;"	m	class:HostManager
create	models/core.py	/^    def create(self,$/;"	m	class:InterfaceManager
create	models/user_as.py	/^    def create(self,$/;"	m	class:UserASManager
create	models/vpn.py	/^    def create(self, server, server_port, subnet, server_vpn_ip):$/;"	m	class:VPNManager
create	models/vpn.py	/^    def create(self, vpn, host, ip, active):$/;"	m	class:VPNClientManager
create_and_check_useras	tests/test_user_as_models.py	/^def create_and_check_useras(testcase,$/;"	f
create_client	models/vpn.py	/^    def create_client(self, host, active, client_ip=None):$/;"	m	class:VPN
create_from_ases	models/core.py	/^    def create_from_ases(self, type, as_a, as_b, active=True, bandwidth=None, mtu=None):$/;"	m	class:LinkManager
create_from_hosts	models/core.py	/^    def create_from_hosts(self, type, host_a, host_b, active=True, bandwidth=None, mtu=None):$/;"	m	class:LinkManager
create_gen	scion_config.py	/^def create_gen(host, archive):$/;"	f
create_random_useras	tests/test_user_as_models.py	/^def create_random_useras(testcase, seed, **kwargs):$/;"	f
create_superuser	models/user.py	/^    def create_superuser(self, email, password, **extra_fields):$/;"	m	class:UserManager
create_testtopo_ases	fixtures/testtopo.py	/^def create_testtopo_ases():$/;"	f
create_testtopo_extraservices	fixtures/testtopo.py	/^def create_testtopo_extraservices():$/;"	f
create_testtopo_isds	fixtures/testtopo.py	/^def create_testtopo_isds():$/;"	f
create_testtopo_links	fixtures/testtopo.py	/^def create_testtopo_links():$/;"	f
create_testtopo_vpn	fixtures/testtopo.py	/^def create_testtopo_vpn():$/;"	f
create_testuser	fixtures/testuser.py	/^def create_testuser():$/;"	f
create_testuser_admin	fixtures/testuser.py	/^def create_testuser_admin():$/;"	f
create_user	models/user.py	/^    def create_user(self, email, password=None, **extra_fields):$/;"	m	class:UserManager
create_user_as	tests/test_vpn_certs.py	/^def create_user_as(ap, label='Some label'):$/;"	f
create_with_default_services	models/core.py	/^    def create_with_default_services(self, isd, as_id, public_ip,$/;"	m	class:ASManager
created_date	models/core.py	/^    created_date = models.DateTimeField(auto_now_add=True)$/;"	v	class:TimestampedModel
default	models/core.py	/^        default=DEFAULT_HOST_INTERNAL_IP,$/;"	v	class:Host
default	models/user_as.py	/^        default=VM$/;"	v	class:UserAS
dependencies	migrations/0001_initial.py	/^    dependencies = [$/;"	v	class:Migration
dependencies	migrations/0002_auto_20190912_0946.py	/^    dependencies = [$/;"	v	class:Migration
deploy_host_config	tasks.py	/^def deploy_host_config(host):$/;"	f
deployment_required	tests/test_huey_taskqueue.py	/^deployment_required = True$/;"	v
drain_and_stop	tests/test_huey_taskqueue.py	/^    def drain_and_stop(self):$/;"	m	class:TestingConsumer
drain_queue	tests/test_huey_taskqueue.py	/^    def drain_queue():$/;"	m	class:TestingConsumer
email	forms/registration_form.py	/^    email = EmailField()$/;"	v	class:RegistrationResendForm
email	models/user.py	/^    email = models.EmailField(_('email address'), unique=True)$/;"	v	class:User
enc_priv_key	models/core.py	/^    enc_priv_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
enc_pub_key	models/core.py	/^    enc_pub_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
encode	util/hashers.py	/^    def encode(self, password, salt, Nlog2=None, r=None, p=None, keyLen=None):$/;"	m	class:SCryptPasswordHasher
encodeAssertion	management/commands/export_zonefile.py	/^    def encodeAssertion(self, subjectName, value):$/;"	m	class:Command
exclude	admin.py	/^        exclude = ['interfaceA', 'interfaceB']$/;"	v	class:LinkAdminForm.Meta
execution_log	tests/test_huey_taskqueue.py	/^execution_log = []$/;"	v
extra	admin.py	/^    extra = 0$/;"	v	class:BorderRouterInline
extra	admin.py	/^    extra = 0$/;"	v	class:HostInline
extra	admin.py	/^    extra = 0$/;"	v	class:InterfaceInline
extra	admin.py	/^    extra = 0$/;"	v	class:ServiceInline
extra_services	fixtures/testtopo.py	/^extra_services = [$/;"	v
field	migrations/0001_initial.py	/^            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ases', to=settings.AUTH_USER_MODEL),$/;"	v	class:Migration
field	migrations/0001_initial.py	/^            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ases', to='scionlab.ISD', verbose_name='ISD'),$/;"	v	class:Migration
field	migrations/0001_initial.py	/^            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='border_routers', to='scionlab.Host'),$/;"	v	class:Migration
field	migrations/0002_auto_20190912_0946.py	/^            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='scionlab.VPNClient'),$/;"	v	class:Migration
field	migrations/0002_auto_20190912_0946.py	/^            field=models.GenericIPAddressField(blank=True, help_text='Default bind IP for border router interfaces running on this host.', null=True),$/;"	v	class:Migration
field	migrations/0002_auto_20190912_0946.py	/^            field=models.GenericIPAddressField(blank=True, help_text='Default public IP for border router interfaces running on this host.', null=True),$/;"	v	class:Migration
field_classes	admin.py	/^        field_classes = {'subnet': GenericIPNetworkField}$/;"	v	class:VPNCreationForm.Meta
field_classes	admin.py	/^        field_classes = {'subnet': GenericIPNetworkField}$/;"	v	class:VPNUpdateForm.Meta
fields	admin.py	/^        fields = ('AS', 'internal_ip', 'public_ip', 'bind_ip', 'label', 'managed', 'ssh_host',$/;"	v	class:HostAdminForm.Meta
fields	admin.py	/^        fields = ('isd', 'as_id', 'label', 'mtu', 'is_core', 'owner',)$/;"	v	class:ASCreationForm.Meta
fields	admin.py	/^        fields = ('server', 'server_port', 'subnet', 'server_vpn_ip')$/;"	v	class:VPNCreationForm.Meta
fields	admin.py	/^        fields = ('server', 'server_port', 'subnet', 'server_vpn_ip', 'private_key', 'cert')$/;"	v	class:VPNUpdateForm.Meta
fields	admin.py	/^        fields = ('vpn', 'host', 'active')$/;"	v	class:VPNClientCreationForm.Meta
fields	admin.py	/^    fields = ('host', 'internal_port', 'control_port')$/;"	v	class:BorderRouterInline
fields	admin.py	/^    fields = ('link', 'interface_id', 'border_router', 'host', 'public_ip_', 'public_port',$/;"	v	class:InterfaceInline
fields	admin.py	/^    fields = ('type', 'host', 'port')$/;"	v	class:ServiceInline
fields	forms/attachment_link_form.py	/^        fields = ('active',)$/;"	v	class:AttachmentLinkForm.Meta
fields	forms/registration_form.py	/^        fields = ('first_name', 'last_name', 'organisation', 'email', )$/;"	v	class:RegistrationFormWithCaptcha.Meta
fields	forms/user_as_form.py	/^        fields = ($/;"	v	class:UserASForm.Meta
fields	migrations/0001_initial.py	/^            fields=[$/;"	v	class:Migration
fieldsets	admin.py	/^    fieldsets = ($/;"	v	class:UserAdmin
filename	settings/development.py	/^                       filename=os.path.join(BASE_DIR, 'run', 'dev-huey.sqlite3'))$/;"	v
find_free_port	models/core.py	/^    def find_free_port(self, ip, min, max=MAX_PORT, preferred=None):$/;"	m	class:Host
find_interface_id	models/core.py	/^    def find_interface_id(self):$/;"	m	class:AS
first_or_create	models/core.py	/^    def first_or_create(self, host):$/;"	m	class:BorderRouterManager
fixtures	tests/test_admin.py	/^    fixtures = ['testtopo-ases']$/;"	v	class:LinkAdminFormTests
fixtures	tests/test_admin.py	/^    fixtures = ['testtopo-isds']$/;"	v	class:ASAdminTests
fixtures	tests/test_admin.py	/^    fixtures = ['testuser-admin', 'testtopo-ases']$/;"	v	class:LinkAdminViewTests
fixtures	tests/test_api.py	/^    fixtures = ['testtopo-ases-links']$/;"	v	class:GetHostConfigTests
fixtures	tests/test_api.py	/^    fixtures = ['testtopo-ases-links']$/;"	v	class:PostHostConfigVersionTests
fixtures	tests/test_api.py	/^    fixtures = ['testtopo-ases-links-extraserv']$/;"	v	class:GetHostConfigExtraServicesTests
fixtures	tests/test_certificates.py	/^    fixtures = ['testtopo-ases']$/;"	v	class:TRCAndCoreASCertificateTestsISD19
fixtures	tests/test_hashers.py	/^    fixtures = []$/;"	v	class:ImportedUserTests
fixtures	tests/test_huey_taskqueue.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:DeployHostConfigTests
fixtures	tests/test_models.py	/^    fixtures = ['testtopo-ases']$/;"	v	class:LinkModificationTests
fixtures	tests/test_models.py	/^    fixtures = ['testtopo-ases']$/;"	v	class:UpdateASKeysTests
fixtures	tests/test_models.py	/^    fixtures = ['testtopo-ases-links']$/;"	v	class:DeleteASTests
fixtures	tests/test_user.py	/^    fixtures = ['testuser']$/;"	v	class:LoginRequiredRedirectTests
fixtures	tests/test_user.py	/^    fixtures = ['testuser']$/;"	v	class:PasswordWebTests
fixtures	tests/test_user_as_models.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:ActivateUserASTests
fixtures	tests/test_user_as_models.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:CreateUserASTests
fixtures	tests/test_user_as_models.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:DeleteUserASTests
fixtures	tests/test_user_as_models.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:UpdateUserASTests
fixtures	tests/test_user_as_models.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:VPNServerTests
fixtures	tests/test_user_as_views.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:UserASActivateTests
fixtures	tests/test_user_as_views.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:UserASCreateTests
fixtures	tests/test_user_as_views.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:UserASFormTests
fixtures	tests/test_user_as_views.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:UserASGetConfigTests
fixtures	tests/test_user_as_views.py	/^    fixtures = ['testuser', 'testtopo-ases-links']$/;"	v	class:UserASPageTests
fixtures	tests/test_vpn_certs.py	/^    fixtures = ['testuser', 'testtopo-ases']$/;"	v	class:VPNCertsMissingCATests
fixtures	tests/test_vpn_certs.py	/^    fixtures = ['testuser', 'testtopo-ases']$/;"	v	class:VPNCertsTests
form	admin.py	/^    form = BorderRouterAdminForm$/;"	v	class:BorderRouterInline
form	admin.py	/^    form = HostAdminForm$/;"	v	class:HostAdmin
form	admin.py	/^    form = HostAdminForm$/;"	v	class:HostInline
form	admin.py	/^    form = InterfaceAdminForm$/;"	v	class:InterfaceInline
form	admin.py	/^    form = LinkAdminForm$/;"	v	class:LinkAdmin
form	admin.py	/^    form = ServiceAdminForm$/;"	v	class:ServiceInline
form_class	views/registration_view.py	/^    form_class = RegistrationFormWithCaptcha$/;"	v	class:UserRegistrationView
form_class	views/registration_view.py	/^    form_class = RegistrationResendForm$/;"	v	class:UserRegistrationResendView
form_class	views/user_as_views.py	/^    form_class = UserASForm$/;"	v	class:UserASCreateView
form_class	views/user_as_views.py	/^    form_class = UserASForm$/;"	v	class:UserASDetailView
format	util/as_ids.py	/^def format(as_id_int):$/;"	f
formfield_for_foreignkey	admin.py	/^    def formfield_for_foreignkey(self, db_field, request, **kwargs):$/;"	m	class:BorderRouterInline
formfield_for_foreignkey	admin.py	/^    def formfield_for_foreignkey(self, db_field, request, **kwargs):$/;"	m	class:InterfaceInline
formfield_for_foreignkey	admin.py	/^    def formfield_for_foreignkey(self, db_field, request, **kwargs):$/;"	m	class:ServiceInline
from_bind_ip	admin.py	/^    from_bind_ip = forms.GenericIPAddressField(required=False)$/;"	v	class:LinkAdminForm
from_bind_port	admin.py	/^    from_bind_port = forms.IntegerField(min_value=1, max_value=MAX_PORT, required=False)$/;"	v	class:LinkAdminForm
from_host	admin.py	/^    from_host = forms.ModelChoiceField(queryset=Host.objects.all())$/;"	v	class:LinkAdminForm
from_public_ip	admin.py	/^    from_public_ip = forms.GenericIPAddressField(required=False)$/;"	v	class:LinkAdminForm
from_public_port	admin.py	/^    from_public_port = forms.IntegerField(min_value=1, max_value=MAX_PORT, required=False)$/;"	v	class:LinkAdminForm
generate_as_certificate_chain	certificates.py	/^def generate_as_certificate_chain(subject_as, issuing_as):$/;"	f
generate_certificate_chain	models/core.py	/^    def generate_certificate_chain(self):$/;"	m	class:AS
generate_core_certificate	certificates.py	/^def generate_core_certificate(as_):$/;"	f
generate_core_certificate	models/core.py	/^    def generate_core_certificate(self):$/;"	m	class:AS
generate_host_config_tar	config_tar.py	/^def generate_host_config_tar(host, fileobj):$/;"	f
generate_instance_dir	util/local_config_util.py	/^def generate_instance_dir(archive, as_, stype, tp, name, prometheus_port):$/;"	f
generate_sciond_config	util/local_config_util.py	/^def generate_sciond_config(archive, as_, tp, name):$/;"	f
generate_server_app_dir	util/local_config_util.py	/^def generate_server_app_dir(archive, as_, app_type, name, host_ip, app_port):$/;"	f
generate_trc	certificates.py	/^def generate_trc(isd):$/;"	f
generate_user_as_config_tar	config_tar.py	/^def generate_user_as_config_tar(user_as, fileobj):$/;"	f
generate_vpn_client_config	openvpn_config.py	/^def generate_vpn_client_config(client):$/;"	f
generate_vpn_client_key_material	openvpn_config.py	/^def generate_vpn_client_key_material(host):$/;"	f
generate_vpn_server_config	openvpn_config.py	/^def generate_vpn_server_config(vpn):$/;"	f
generate_vpn_server_key_material	openvpn_config.py	/^def generate_vpn_server_key_material(host):$/;"	f
get	views/api.py	/^    def get(self, request, *args, **kwargs):$/;"	m	class:GetHostConfig
get	views/user_as_views.py	/^    def get(self, request, *args, **kwargs):$/;"	m	class:UserASCreateView
get	views/user_as_views.py	/^    def get(self, request, *args, **kwargs):$/;"	m	class:UserASDetailView
get	views/user_as_views.py	/^    def get(self, request, *args, **kwargs):$/;"	m	class:UserASGetConfigView
get_absolute_url	models/user_as.py	/^    def get_absolute_url(self):$/;"	m	class:UserAS
get_ap_strs	tests/test_user_as_views.py	/^    def get_ap_strs():$/;"	m	class:UserASCreateTests
get_bind_ip	models/core.py	/^    def get_bind_ip(self):$/;"	m	class:Interface
get_border_router_for_useras_interface	models/user_as.py	/^    def get_border_router_for_useras_interface(self):$/;"	m	class:AttachmentPoint
get_by_address_port	models/core.py	/^    def get_by_address_port(self, as_, public_ip, public_port):$/;"	m	class:InterfaceManager
get_by_isd_as	models/core.py	/^    def get_by_isd_as(self, isd_as):$/;"	m	class:ASManager
get_cert_common_name	openvpn_config.py	/^def get_cert_common_name(cert_data):$/;"	f
get_config	admin.py	/^    def get_config(self, request, object_id):$/;"	m	class:HostAdmin
get_config_link	admin.py	/^    def get_config_link(self, obj):$/;"	m	class:HostAdminMixin
get_context_data	views/user_as_views.py	/^    def get_context_data(self, **kwargs):$/;"	m	class:UserASCreateView
get_context_data	views/user_as_views.py	/^    def get_context_data(self, **kwargs):$/;"	m	class:UserASDetailView
get_fieldsets	admin.py	/^    def get_fieldsets(self, request, obj=None):$/;"	m	class:ASAdmin
get_fieldsets	admin.py	/^    def get_fieldsets(self, request, obj=None):$/;"	m	class:ISDAdmin
get_form	admin.py	/^    def get_form(self, request, obj=None, **kwargs):$/;"	m	class:ASAdmin
get_form	admin.py	/^    def get_form(self, request, obj=None, **kwargs):$/;"	m	class:VPNAdmin
get_form	admin.py	/^    def get_form(self, request, obj=None, **kwargs):$/;"	m	class:VPNClientAdmin
get_form_kwargs	views/user_as_views.py	/^    def get_form_kwargs(self):$/;"	m	class:UserASCreateView
get_form_kwargs	views/user_as_views.py	/^    def get_form_kwargs(self):$/;"	m	class:UserASDetailView
get_inline_instances	admin.py	/^    def get_inline_instances(self, request, obj):$/;"	m	class:ASAdmin
get_interface_a	models/core.py	/^    def get_interface_a(self):$/;"	m	class:Link
get_interface_b	models/core.py	/^    def get_interface_b(self):$/;"	m	class:Link
get_next_id	models/user_as.py	/^    def get_next_id(self):$/;"	m	class:UserASManager
get_parent_object_from_request	admin.py	/^    def get_parent_object_from_request(self, request):$/;"	m	class:BorderRouterInline
get_parent_object_from_request	admin.py	/^    def get_parent_object_from_request(self, request):$/;"	m	class:InterfaceInline
get_parent_object_from_request	admin.py	/^    def get_parent_object_from_request(self, request):$/;"	m	class:ServiceInline
get_port	util/portmap.py	/^    def get_port(self, *args, **kwargs):$/;"	m	class:LazyPortMap
get_port	util/portmap.py	/^    def get_port(self, ip, min, max=MAX_PORT, preferred=None):$/;"	m	class:PortMap
get_port_map	models/core.py	/^    def get_port_map(self):$/;"	m	class:Host
get_provider_link	tests/test_user_as_models.py	/^def get_provider_link(parent_as, child_as):$/;"	f
get_public_ip	models/core.py	/^    def get_public_ip(self):$/;"	m	class:Interface
get_queryset	views/user_as_views.py	/^    def get_queryset(self):$/;"	m	class:OwnedUserASQuerysetMixin
get_readonly_fields	admin.py	/^    def get_readonly_fields(self, request, obj):$/;"	m	class:ASAdmin
get_readonly_fields	admin.py	/^    def get_readonly_fields(self, request, obj):$/;"	m	class:ISDAdmin
get_success_url	views/user_as_views.py	/^    def get_success_url(self):$/;"	m	class:UserASActivateView
get_success_url	views/user_as_views.py	/^    def get_success_url(self):$/;"	m	class:UserASCreateView
get_testuser	fixtures/testuser.py	/^def get_testuser():$/;"	f
get_testuser_admin	fixtures/testuser.py	/^def get_testuser_admin():$/;"	f
get_urls	admin.py	/^    def get_urls(self):$/;"	m	class:HostAdmin
grafana_url	context_processors.py	/^def grafana_url(request):$/;"	f
handle	management/commands/export_zonefile.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
handle	management/commands/initialize_root_ca.py	/^    def handle(self, *args, **options):$/;"	m	class:Command
harden_runtime	util/hashers.py	/^    def harden_runtime(self, password, encoded):$/;"	m	class:SCryptPasswordHasher
has_add_permission	admin.py	/^    def has_add_permission(self, *args, **kwargs):$/;"	m	class:InterfaceInline
has_changed	admin.py	/^    def has_changed(self, *args, **kwargs):$/;"	m	class:_AlwaysChangedModelForm
help	management/commands/export_zonefile.py	/^    help = 'Creates a RAINS compatible zonefile containing all hosts'$/;"	v	class:Command
help	management/commands/initialize_root_ca.py	/^    help = 'Generate root CA configuration'$/;"	v	class:Command
help_text	forms/attachment_link_form.py	/^        help_text="(Optional) Specify the local IP\/port "$/;"	v	class:AttachmentLinkForm.Meta
help_text	forms/attachment_link_form.py	/^        help_text="Public IP address",$/;"	v	class:AttachmentLinkForm.Meta
help_text	forms/attachment_link_form.py	/^        help_text="The attachment point will use this port for the overlay link to your AS."$/;"	v	class:AttachmentLinkForm.Meta
help_text	forms/attachment_link_form.py	/^        help_text="Use an OpenVPN connection for the overlay link between this attachment point "$/;"	v	class:AttachmentLinkForm.Meta
help_text	forms/user_as_form.py	/^        help_text="Bind IP for this host",$/;"	v	class:UserASForm.Meta
help_text	forms/user_as_form.py	/^        help_text="Public IP for this host",$/;"	v	class:UserASForm.Meta
help_text	models/core.py	/^                                      help_text="Maximum Transfer Unit for intra AS packets.")$/;"	v	class:AS
help_text	models/core.py	/^                              help_text="Secret token for API")$/;"	v	class:Host
help_text	models/core.py	/^                           help_text="Identifier for API",$/;"	v	class:Host
help_text	models/core.py	/^        help_text="Default bind IP for border router interfaces running on this host."$/;"	v	class:Host
help_text	models/core.py	/^        help_text="Default public IP for border router interfaces running on this host."$/;"	v	class:Host
help_text	models/core.py	/^        help_text="Hostname or IP for management access via SSH. Configured in run\/ssh_config."$/;"	v	class:Host
help_text	models/core.py	/^        help_text="IP of the host in the AS"$/;"	v	class:Host
help_texts	forms/user_as_form.py	/^        help_texts = {$/;"	v	class:UserASForm.Meta
host	models/core.py	/^    host = models.ForeignKey($/;"	v	class:BorderRouter
host	models/core.py	/^    host = models.ForeignKey($/;"	v	class:Interface
host	models/core.py	/^    host = models.ForeignKey($/;"	v	class:Service
host	models/user_as.py	/^    def host(self):$/;"	m	class:UserAS
host	models/vpn.py	/^    host = models.ForeignKey($/;"	v	class:VPNClient
ia	tests/test_certificates.py	/^        def ia(as_id):$/;"	f	function:TRCAndCoreASCertificateTestsSimple.test_random_mutations
inactive	models/core.py	/^    def inactive(self):$/;"	m	class:InterfaceManager
init_default_services	models/core.py	/^    def init_default_services(self, public_ip, bind_ip=None, internal_ip=None):$/;"	m	class:AS
init_key	models/vpn.py	/^    def init_key(self):$/;"	m	class:VPN
init_key	models/vpn.py	/^    def init_key(self):$/;"	m	class:VPNClient
init_keys	models/core.py	/^    def init_keys(self):$/;"	m	class:AS
init_trc_and_certificates	models/core.py	/^    def init_trc_and_certificates(self):$/;"	m	class:ISD
initial	forms/attachment_link_form.py	/^        initial=50000,$/;"	v	class:AttachmentLinkForm.Meta
initial	migrations/0001_initial.py	/^    initial = True$/;"	v	class:Migration
inlines	admin.py	/^    inlines = [InterfaceInline, BorderRouterInline, ServiceInline, HostInline]$/;"	v	class:ASAdmin
install_scionlab_config	hostfiles/scion_upgrade_script.sh	/^install_scionlab_config() {$/;"	f
installation_type	models/user_as.py	/^    installation_type = models.CharField($/;"	v	class:UserAS
instance_indicator	context_processors.py	/^def instance_indicator(request):$/;"	f
interfaceA	models/core.py	/^    interfaceA = models.OneToOneField($/;"	v	class:Link
interfaceB	models/core.py	/^    interfaceB = models.OneToOneField($/;"	v	class:Link
interface_id	models/core.py	/^    interface_id = models.PositiveSmallIntegerField()$/;"	v	class:Interface
internal_ip	admin.py	/^    internal_ip = forms.GenericIPAddressField(required=False, initial=DEFAULT_HOST_INTERNAL_IP)$/;"	v	class:ASCreationForm
internal_ip	models/core.py	/^    internal_ip = models.GenericIPAddressField($/;"	v	class:Host
internal_port	models/core.py	/^    internal_port = models.PositiveIntegerField(blank=True)$/;"	v	class:BorderRouter
invalid_form_params	tests/test_user_as_views.py	/^    invalid_form_params = [$/;"	v	class:UserASFormTests
ip	models/vpn.py	/^    ip = models.GenericIPAddressField()$/;"	v	class:VPNClient
is_active	models/user_as.py	/^    def is_active(self):$/;"	m	class:UserAS
is_ap	admin.py	/^    def is_ap(self, obj):$/;"	m	class:ASAdmin
is_core	models/core.py	/^    is_core = models.BooleanField(default=False)$/;"	v	class:AS
is_empty_config	config_tar.py	/^def is_empty_config(host):$/;"	f
is_free	util/portmap.py	/^    def is_free(self, *args, **kwargs):$/;"	m	class:LazyPortMap
is_free	util/portmap.py	/^    def is_free(self, ip, port):$/;"	m	class:PortMap
is_infrastructure_AS	models/core.py	/^    def is_infrastructure_AS(self):$/;"	m	class:AS
is_use_vpn	models/user_as.py	/^    def is_use_vpn(self):$/;"	m	class:UserAS
is_used	util/portmap.py	/^    def is_used(self, *args, **kwargs):$/;"	m	class:LazyPortMap
is_used	util/portmap.py	/^    def is_used(self, ip, port):$/;"	m	class:PortMap
is_userAS	admin.py	/^    def is_userAS(self, obj):$/;"	m	class:ASAdmin
isd	models/core.py	/^    isd = models.ForeignKey($/;"	v	class:AS
isd19_core_ases	tests/test_certificates.py	/^    isd19_core_ases = ['19-ffaa:0:1301', '19-ffaa:0:1302']$/;"	v	class:TRCAndCoreASCertificateTestsISD19
isd_as_path_str	models/core.py	/^    def isd_as_path_str(self):$/;"	m	class:AS
isd_as_str	models/core.py	/^    def isd_as_str(self):$/;"	m	class:AS
isd_id	models/core.py	/^    isd_id = models.PositiveIntegerField()$/;"	v	class:ISD
isds	fixtures/testtopo.py	/^isds = [$/;"	v
keyLen	util/hashers.py	/^    keyLen = 64$/;"	v	class:SCryptPasswordHasher
label	forms/attachment_link_form.py	/^        label="Bind IP address",$/;"	v	class:AttachmentLinkForm.Meta
label	forms/attachment_link_form.py	/^        label="Bind port",$/;"	v	class:AttachmentLinkForm.Meta
label	forms/attachment_link_form.py	/^        label="Public Port (UDP)",$/;"	v	class:AttachmentLinkForm.Meta
label	forms/attachment_link_form.py	/^        label="Use VPN",$/;"	v	class:AttachmentLinkForm.Meta
label	models/core.py	/^    label = models.CharField(max_length=_MAX_LEN_DEFAULT, null=True, blank=True)$/;"	v	class:AS
label	models/core.py	/^    label = models.CharField(max_length=_MAX_LEN_DEFAULT, null=True, blank=True)$/;"	v	class:Host
label	models/core.py	/^    label = models.CharField(max_length=_MAX_LEN_DEFAULT, null=True, blank=True)$/;"	v	class:ISD
labels	forms/user_as_form.py	/^        labels = {$/;"	v	class:UserASForm.Meta
latest_config_deployed	admin.py	/^    def latest_config_deployed(self, obj):$/;"	m	class:HostAdminMixin
library	util/hashers.py	/^    library = ("scrypt", "scrypt",)$/;"	v	class:SCryptPasswordHasher
link	admin.py	/^    def link(self, obj):$/;"	m	class:InterfaceInline
link	models/core.py	/^    def link(self):$/;"	m	class:Interface
links	fixtures/testtopo.py	/^links = [$/;"	v
list_display	admin.py	/^    list_display = ('__str__', 'AS',$/;"	v	class:HostAdmin
list_display	admin.py	/^    list_display = ('__str__', 'server', 'subnet', 'server_vpn_ip', 'num_clients')$/;"	v	class:VPNAdmin
list_display	admin.py	/^    list_display = ('__str__', 'type', 'active', 'public_ip_a', 'public_port_a', 'bind_ip_a',$/;"	v	class:LinkAdmin
list_display	admin.py	/^    list_display = ('__str__', 'vpn', 'ip', 'common_name')$/;"	v	class:VPNClientAdmin
list_display	admin.py	/^    list_display = ('email', 'first_name', 'last_name', 'organisation', 'is_staff', 'is_superuser')$/;"	v	class:UserAdmin
list_display	admin.py	/^    list_display = ('isd', 'as_id', 'label', 'is_core', 'is_ap', 'is_userAS')$/;"	v	class:ASAdmin
list_display	admin.py	/^    list_display = ('isd_id', 'label',)$/;"	v	class:ISDAdmin
list_display_links	admin.py	/^    list_display_links = ('__str__',)$/;"	v	class:VPNAdmin
list_display_links	admin.py	/^    list_display_links = ('__str__',)$/;"	v	class:VPNClientAdmin
list_display_links	admin.py	/^    list_display_links = ('as_id', 'label')$/;"	v	class:ASAdmin
list_editable	admin.py	/^    list_editable = ('label',)$/;"	v	class:ISDAdmin
list_filter	admin.py	/^    list_filter = ('AS__isd', 'AS', )$/;"	v	class:HostAdmin
list_filter	admin.py	/^    list_filter = ('isd', 'is_core', InfrastructureASFilter)$/;"	v	class:ASAdmin
list_filter	admin.py	/^    list_filter = ('type', 'active', 'interfaceA__AS', 'interfaceB__AS',)$/;"	v	class:LinkAdmin
list_filter	admin.py	/^    list_filter = ('vpn', 'active')$/;"	v	class:VPNClientAdmin
load_ca_cert	openvpn_config.py	/^def load_ca_cert():$/;"	f
load_ca_key	openvpn_config.py	/^def load_ca_key():$/;"	f
load_ca_key_material	openvpn_config.py	/^def load_ca_key_material():$/;"	f
lookups	admin.py	/^        def lookups(self, request, model_admin):$/;"	m	class:ASAdmin.InfrastructureASFilter
makeASdef	fixtures/testtopo.py	/^def makeASdef(isd_id, as_id_tail, label, public_ip, is_core=False, is_ap=False):$/;"	f
makeLinkDef	fixtures/testtopo.py	/^def makeLinkDef(type, as_id_tail_a, as_id_tail_b):$/;"	f
make_as_id	tests/test_certificates.py	/^        def make_as_id(i):$/;"	f	function:TRCAndCoreASCertificateTestsSimple.test_random_mutations
managed	models/core.py	/^    managed = models.BooleanField(default=False)$/;"	v	class:Host
managers	migrations/0001_initial.py	/^            managers=[$/;"	v	class:Migration
master_as_key	models/core.py	/^    master_as_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
max_length	models/core.py	/^        max_length=15,$/;"	v	class:AS
max_length	models/core.py	/^        max_length=_MAX_LEN_CHOICES_DEFAULT$/;"	v	class:Link
max_length	models/core.py	/^        max_length=_MAX_LEN_CHOICES_DEFAULT$/;"	v	class:Service
max_length	models/core.py	/^        max_length=_MAX_LEN_DEFAULT,$/;"	v	class:Host
max_length	models/user_as.py	/^        max_length=_MAX_LEN_CHOICES_DEFAULT,$/;"	v	class:UserAS
max_num_ases	models/user.py	/^    def max_num_ases(self):$/;"	m	class:User
max_value	forms/attachment_link_form.py	/^        max_value=MAX_PORT,$/;"	v	class:AttachmentLinkForm.Meta
min_value	forms/attachment_link_form.py	/^        min_value=1024,$/;"	v	class:AttachmentLinkForm.Meta
mock_preexecute_hook	tests/test_huey_taskqueue.py	/^def mock_preexecute_hook(task):$/;"	f
model	admin.py	/^        model = Link$/;"	v	class:LinkAdminForm.Meta
model	admin.py	/^    model = BorderRouter$/;"	v	class:BorderRouterInline
model	admin.py	/^    model = Host$/;"	v	class:HostInline
model	admin.py	/^    model = Interface$/;"	v	class:InterfaceInline
model	admin.py	/^    model = Service$/;"	v	class:ServiceInline
model	forms/attachment_link_form.py	/^        model = Link$/;"	v	class:AttachmentLinkForm.Meta
model	forms/registration_form.py	/^        model = User$/;"	v	class:RegistrationFormWithCaptcha.Meta
model	forms/user_as_form.py	/^        model = UserAS$/;"	v	class:UserASForm.Meta
model	views/api.py	/^    model = Host$/;"	v	class:GetHostConfig
model	views/api.py	/^    model = Host$/;"	v	class:PostHostDeployedConfigVersion
model	views/user_as_views.py	/^    model = UserAS$/;"	v	class:UserASActivateView
model	views/user_as_views.py	/^    model = UserAS$/;"	v	class:UserASCreateView
model	views/user_as_views.py	/^    model = UserAS$/;"	v	class:UserASDeleteView
model	views/user_as_views.py	/^    model = UserAS$/;"	v	class:UserASDetailView
model	views/user_as_views.py	/^    model = UserAS$/;"	v	class:UserASesView
model_name	migrations/0001_initial.py	/^            model_name='as',$/;"	v	class:Migration
model_name	migrations/0001_initial.py	/^            model_name='borderrouter',$/;"	v	class:Migration
model_name	migrations/0002_auto_20190912_0946.py	/^            model_name='host',$/;"	v	class:Migration
model_name	migrations/0002_auto_20190912_0946.py	/^            model_name='interface',$/;"	v	class:Migration
model_name	migrations/0002_auto_20190912_0946.py	/^            model_name='useras',$/;"	v	class:Migration
modified_date	models/core.py	/^    modified_date = models.DateTimeField(auto_now=True)$/;"	v	class:TimestampedModel
mtu	models/core.py	/^    mtu = models.PositiveIntegerField(default=DEFAULT_LINK_MTU)$/;"	v	class:Link
mtu	models/core.py	/^    mtu = models.PositiveIntegerField(default=DEFAULT_LINK_MTU,$/;"	v	class:AS
name	migrations/0001_initial.py	/^            name='AS',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='AttachmentPoint',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='BorderRouter',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='Host',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='ISD',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='Interface',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='Link',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='Service',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='User',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='UserAS',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='VPN',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='VPNClient',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='as',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='host',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='isd',$/;"	v	class:Migration
name	migrations/0001_initial.py	/^            name='owner',$/;"	v	class:Migration
name	migrations/0002_auto_20190912_0946.py	/^            name='attachment_point',$/;"	v	class:Migration
name	migrations/0002_auto_20190912_0946.py	/^            name='bind_ip',$/;"	v	class:Migration
name	migrations/0002_auto_20190912_0946.py	/^            name='bind_port',$/;"	v	class:Migration
name	migrations/0002_auto_20190912_0946.py	/^            name='public_ip',$/;"	v	class:Migration
name	migrations/0002_auto_20190912_0946.py	/^            name='vpn_client',$/;"	v	class:Migration
name	urls.py	/^         name='api_get_config'),$/;"	v
name	urls.py	/^         name='api_post_deployed_version'),$/;"	v
name	urls.py	/^         name='registration_confirm'),$/;"	v
name	urls.py	/^         name='registration_form'),$/;"	v
name	urls.py	/^         name='registration_resend'),$/;"	v
name	urls.py	/^         name='user_as_activate'),$/;"	v
name	urls.py	/^         name='user_as_config'),$/;"	v
name	urls.py	/^         name='user_as_deactivate'),$/;"	v
name	urls.py	/^         name='user_as_delete'),$/;"	v
name	urls.py	/^         name='user_as_detail'),$/;"	v
needs_config_deployment	models/core.py	/^    def needs_config_deployment(self):$/;"	m	class:Host
needs_config_deployment	models/core.py	/^    def needs_config_deployment(self):$/;"	m	class:HostManager
null	models/core.py	/^        null=True,$/;"	v	class:AS
null	models/core.py	/^        null=True,$/;"	v	class:Host
null	models/core.py	/^        null=True,$/;"	v	class:ISD
null	models/core.py	/^        null=True,$/;"	v	class:Interface
null	models/user_as.py	/^        null=True,$/;"	v	class:AttachmentPoint
num_ases	models/user.py	/^    def num_ases(self):$/;"	m	class:User
num_clients	admin.py	/^    def num_clients(self, obj):$/;"	m	class:VPNAdmin
objects	models/core.py	/^    objects = ASManager()$/;"	v	class:AS
objects	models/core.py	/^    objects = BorderRouterManager()$/;"	v	class:BorderRouter
objects	models/core.py	/^    objects = HostManager()$/;"	v	class:Host
objects	models/core.py	/^    objects = InterfaceManager()$/;"	v	class:Interface
objects	models/core.py	/^    objects = LinkManager()$/;"	v	class:Link
objects	models/core.py	/^    objects = ServiceManager()$/;"	v	class:Service
objects	models/user.py	/^    objects = UserManager()$/;"	v	class:User
objects	models/user_as.py	/^    objects = UserASManager()$/;"	v	class:UserAS
objects	models/vpn.py	/^    objects = VPNClientManager()$/;"	v	class:VPNClient
objects	models/vpn.py	/^    objects = VPNManager()$/;"	v	class:VPN
on_delete	models/core.py	/^        on_delete=models.CASCADE$/;"	v	class:BorderRouter
on_delete	models/core.py	/^        on_delete=models.CASCADE$/;"	v	class:Link
on_delete	models/core.py	/^        on_delete=models.CASCADE$/;"	v	class:Service
on_delete	models/core.py	/^        on_delete=models.CASCADE,$/;"	v	class:AS
on_delete	models/core.py	/^        on_delete=models.CASCADE,$/;"	v	class:BorderRouter
on_delete	models/core.py	/^        on_delete=models.CASCADE,$/;"	v	class:Interface
on_delete	models/core.py	/^        on_delete=models.CASCADE,$/;"	v	class:Service
on_delete	models/core.py	/^        on_delete=models.SET_NULL,$/;"	v	class:Host
on_delete	models/user_as.py	/^        on_delete=models.CASCADE,$/;"	v	class:AttachmentPoint
on_delete	models/user_as.py	/^        on_delete=models.SET_NULL$/;"	v	class:AttachmentPoint
on_delete	models/vpn.py	/^        on_delete=models.CASCADE$/;"	v	class:VPN
on_delete	models/vpn.py	/^        on_delete=models.CASCADE$/;"	v	class:VPNClient
operations	migrations/0001_initial.py	/^    operations = [$/;"	v	class:Migration
operations	migrations/0002_auto_20190912_0946.py	/^    operations = [$/;"	v	class:Migration
options	migrations/0001_initial.py	/^            options={$/;"	v	class:Migration
ordering	admin.py	/^    ordering = ('email',)$/;"	v	class:UserAdmin
ordering	admin.py	/^    ordering = ('isd', 'as_id')$/;"	v	class:ASAdmin
ordering	admin.py	/^    ordering = ['AS']$/;"	v	class:HostAdmin
ordering	admin.py	/^    ordering = ['isd_id']$/;"	v	class:ISDAdmin
organisation	models/user.py	/^    organisation = models.CharField(max_length=255, null=False, blank=True)$/;"	v	class:User
owner	models/core.py	/^    owner = models.ForeignKey($/;"	v	class:AS
p	util/hashers.py	/^    p = 1$/;"	v	class:SCryptPasswordHasher
parameter_name	admin.py	/^        parameter_name = 'infrastructure_as'$/;"	v	class:ASAdmin.InfrastructureASFilter
parse	util/as_ids.py	/^def parse(as_id_str):$/;"	f
password	models/user.py	/^    password = models.CharField(_('password'), max_length=255)$/;"	v	class:User
path_str	models/core.py	/^    def path_str(self):$/;"	m	class:Host
pending_tasks_by_name	tests/test_huey_taskqueue.py	/^def pending_tasks_by_name(name):$/;"	f
port	models/core.py	/^    port = models.PositiveIntegerField(blank=True)$/;"	v	class:Service
post	views/api.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:PostHostDeployedConfigVersion
post	views/user_as_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:UserASActivateView
post	views/user_as_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:UserASCreateView
post	views/user_as_views.py	/^    def post(self, request, *args, **kwargs):$/;"	m	class:UserASDetailView
private_key	models/vpn.py	/^    private_key = models.TextField(null=True, blank=True)$/;"	v	class:VPN
private_key	models/vpn.py	/^    private_key = models.TextField(null=True, blank=True)$/;"	v	class:VPNClient
public_ip	admin.py	/^    public_ip = forms.GenericIPAddressField()$/;"	v	class:ASCreationForm
public_ip	forms/attachment_link_form.py	/^    public_ip = forms.GenericIPAddressField($/;"	v	class:AttachmentLinkForm
public_ip	forms/user_as_form.py	/^    public_ip = forms.GenericIPAddressField($/;"	v	class:UserASForm
public_ip	models/core.py	/^    public_ip = models.GenericIPAddressField($/;"	v	class:Host
public_ip	models/core.py	/^    public_ip = models.GenericIPAddressField($/;"	v	class:Interface
public_ip_	admin.py	/^    def public_ip_(self, obj):$/;"	m	class:InterfaceInline
public_ip_a	admin.py	/^    def public_ip_a(self, obj):$/;"	m	class:LinkAdmin
public_ip_b	admin.py	/^    def public_ip_b(self, obj):$/;"	m	class:LinkAdmin
public_port	forms/attachment_link_form.py	/^    public_port = forms.IntegerField($/;"	v	class:AttachmentLinkForm
public_port	models/core.py	/^    public_port = models.PositiveIntegerField()$/;"	v	class:Interface
public_port_a	admin.py	/^    def public_port_a(self, obj):$/;"	m	class:LinkAdmin
public_port_b	admin.py	/^    def public_port_b(self, obj):$/;"	m	class:LinkAdmin
queryset	admin.py	/^        def queryset(self, request, queryset):$/;"	m	class:ASAdmin.InfrastructureASFilter
r	util/hashers.py	/^    r = 8$/;"	v	class:SCryptPasswordHasher
readonly_fields	admin.py	/^    readonly_fields = ('latest_config_deployed', 'get_config_link')$/;"	v	class:HostInline
readonly_fields	admin.py	/^    readonly_fields = ['uid']$/;"	v	class:HostAdmin
readonly_fields	admin.py	/^    readonly_fields = tuple([f for f in fields if f != 'border_router'])$/;"	v	class:InterfaceInline
register	views/registration_view.py	/^    def register(self, form):$/;"	m	class:UserRegistrationResendView
register	views/registration_view.py	/^    def register(self, form):$/;"	m	class:UserRegistrationView
related_name	models/core.py	/^        related_name='ases',$/;"	v	class:AS
related_name	models/core.py	/^        related_name='border_routers',$/;"	v	class:BorderRouter
related_name	models/core.py	/^        related_name='hosts',$/;"	v	class:Host
related_name	models/core.py	/^        related_name='interfaces',$/;"	v	class:Interface
related_name	models/core.py	/^        related_name='link_as_interfaceA',$/;"	v	class:Link
related_name	models/core.py	/^        related_name='link_as_interfaceB',$/;"	v	class:Link
related_name	models/core.py	/^        related_name='services',$/;"	v	class:Service
related_name	models/user_as.py	/^        related_name='+',$/;"	v	class:AttachmentPoint
related_name	models/user_as.py	/^        related_name='attachment_point_info',$/;"	v	class:AttachmentPoint
related_name	models/vpn.py	/^        related_name='clients',$/;"	v	class:VPNClient
related_name	models/vpn.py	/^        related_name='vpn_clients',$/;"	v	class:VPNClient
related_name	models/vpn.py	/^        related_name='vpn_servers',$/;"	v	class:VPN
remote_as	models/core.py	/^    def remote_as(self):$/;"	m	class:Interface
remote_interface	models/core.py	/^    def remote_interface(self):$/;"	m	class:Interface
required	forms/attachment_link_form.py	/^        required=False$/;"	v	class:AttachmentLinkForm.Meta
required	forms/attachment_link_form.py	/^        required=False,$/;"	v	class:AttachmentLinkForm.Meta
required	forms/user_as_form.py	/^        required=False$/;"	v	class:UserASForm.Meta
reset_needs_config_deployment	models/core.py	/^    def reset_needs_config_deployment(self):$/;"	m	class:HostManager
run_linux	hostfiles/run.sh	/^run_linux() {$/;"	f
run_osx	hostfiles/run.sh	/^run_osx() {$/;"	f
run_vagrant	hostfiles/run.sh	/^run_vagrant() {$/;"	f
safe_summary	util/hashers.py	/^    def safe_summary(self, encoded):$/;"	m	class:SCryptPasswordHasher
salt	util/hashers.py	/^    def salt(self):$/;"	m	class:SCryptPasswordHasher
save	admin.py	/^    def save(self, commit=True):$/;"	m	class:_CreateUpdateModelForm
save	forms/attachment_link_form.py	/^    def save(self, userAS, commit=True):$/;"	m	class:AttachmentLinkForm
save	forms/user_as_form.py	/^    def save(self, commit=True):$/;"	m	class:UserASForm
save	models/core.py	/^    def save(self, **kwargs):$/;"	m	class:Interface
save	models/vpn.py	/^    def save(self, **kwargs):$/;"	m	class:VPN
save	views/user_as_views.py	/^    def save(self, userAS):$/;"	m	class:AttachmentLinksFormSet
scheduled_tasks_by_name	tests/test_huey_taskqueue.py	/^def scheduled_tasks_by_name(name):$/;"	f
scion_address	models/core.py	/^    def scion_address(self):$/;"	m	class:Host
search_fields	admin.py	/^    search_fields = ('email', 'first_name', 'last_name')$/;"	v	class:UserAdmin
secret	models/core.py	/^    secret = models.CharField(max_length=_MAX_LEN_DEFAULT,$/;"	v	class:Host
seeded_random_bytes	fixtures/testtopo.py	/^    def seeded_random_bytes(size=32):$/;"	f	function:create_testtopo_ases
server	models/vpn.py	/^    server = models.ForeignKey($/;"	v	class:VPN
server_port	models/vpn.py	/^    server_port = models.PositiveIntegerField()$/;"	v	class:VPN
server_vpn_ip	models/vpn.py	/^    server_vpn_ip = models.GenericIPAddressField()$/;"	v	class:VPN
setUp	tests/test_api.py	/^    def setUp(self):$/;"	m	class:GetHostConfigTests
setUp	tests/test_api.py	/^    def setUp(self):$/;"	m	class:PostHostConfigVersionTests
setUp	tests/test_hashers.py	/^    def setUp(self):$/;"	m	class:ImportedUserTests
setUp	tests/test_huey_taskqueue.py	/^    def setUp(self):$/;"	m	class:DeployHostConfigTests
setUp	tests/test_models.py	/^    def setUp(self):$/;"	m	class:DeleteASTests
setUp	tests/test_models.py	/^    def setUp(self):$/;"	m	class:StringRepresentationTests
setUp	tests/test_registration.py	/^    def setUp(self):$/;"	m	class:ActivationRequiredTest
setUp	tests/test_user.py	/^    def setUp(self):$/;"	m	class:LoginRequiredRedirectTests
setUp	tests/test_user.py	/^    def setUp(self):$/;"	m	class:PasswordWebTests
setUp	tests/test_user_as_models.py	/^    def setUp(self):$/;"	m	class:ActivateUserASTests
setUp	tests/test_user_as_models.py	/^    def setUp(self):$/;"	m	class:CreateUserASTests
setUp	tests/test_user_as_models.py	/^    def setUp(self):$/;"	m	class:DeleteUserASTests
setUp	tests/test_user_as_models.py	/^    def setUp(self):$/;"	m	class:UpdateUserASTests
setUp	tests/test_user_as_views.py	/^    def setUp(self):$/;"	m	class:UserASCreateTests
setUp	tests/test_user_as_views.py	/^    def setUp(self):$/;"	m	class:UserASFormTests
setUp	tests/test_vpn_certs.py	/^    def setUp(self):$/;"	m	class:VPNCertsTests
setup_package	tests/__init__.py	/^def setup_package():$/;"	f
setup_vpn_attachment_point	tests/test_user_as_models.py	/^def setup_vpn_attachment_point(ap):$/;"	f
sig_priv_key	models/core.py	/^    sig_priv_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
sig_pub_key	models/core.py	/^    sig_pub_key = models.CharField(max_length=_MAX_LEN_KEYS, null=True, blank=True)$/;"	v	class:AS
slug_field	views/api.py	/^    slug_field = 'uid'$/;"	v	class:GetHostConfig
slug_field	views/api.py	/^    slug_field = 'uid'$/;"	v	class:PostHostDeployedConfigVersion
slug_url_kwarg	views/api.py	/^    slug_url_kwarg = 'uid'$/;"	v	class:GetHostConfig
slug_url_kwarg	views/api.py	/^    slug_url_kwarg = 'uid'$/;"	v	class:PostHostDeployedConfigVersion
split_border_routers	models/user_as.py	/^    def split_border_routers(self, max_ifaces=10):$/;"	m	class:AttachmentPoint
ssh_host	models/core.py	/^    ssh_host = models.CharField($/;"	v	class:Host
start	tests/test_huey_taskqueue.py	/^    def start(self):$/;"	m	class:TestingConsumer
status_code	util/http.py	/^    status_code = 401$/;"	v	class:HttpResponseAuthenticate
stop	tests/test_huey_taskqueue.py	/^    def stop(self):$/;"	m	class:TestingConsumer
subnet	models/vpn.py	/^    subnet = models.CharField(max_length=15)$/;"	v	class:VPN
subprocess_call_log	tests/utils.py	/^def subprocess_call_log(*popenargs, timeout=None, **kwargs):$/;"	f
success_url	views/registration_view.py	/^    success_url = reverse_lazy('registration_confirm')$/;"	v	class:UserRegistrationResendView
success_url	views/registration_view.py	/^    success_url = reverse_lazy('registration_confirm')$/;"	v	class:UserRegistrationView
success_url	views/user_as_views.py	/^    success_url = reverse_lazy('user')$/;"	v	class:UserASDeleteView
supported_ip_versions	models/user_as.py	/^    def supported_ip_versions(self):$/;"	m	class:AttachmentPoint
tar_add_dir	util/archive.py	/^def tar_add_dir(tar, path, mode=0o755):$/;"	f
tar_add_textfile	util/archive.py	/^def tar_add_textfile(tar, path, content):$/;"	f
task_canceled_handler	tests/test_huey_taskqueue.py	/^def task_canceled_handler(signal, task, exc=None):$/;"	f
task_pre_check	tests/test_huey_taskqueue.py	/^task_pre_check = {}$/;"	v
tearDown	tests/test_huey_taskqueue.py	/^    def tearDown(self):$/;"	m	class:DeployHostConfigTests
tearDown	tests/test_registration.py	/^    def tearDown(selfself):$/;"	m	class:ActivationRequiredTest
tearDown	tests/test_user.py	/^    def tearDown(selfself):$/;"	m	class:LoginRequiredRedirectTests
tearDown	tests/test_user.py	/^    def tearDown(selfself):$/;"	m	class:PasswordWebTests
tearDown	tests/test_vpn_certs.py	/^    def tearDown(self):$/;"	m	class:RootCASetupTests
tearDown	tests/test_vpn_certs.py	/^    def tearDown(self):$/;"	m	class:VPNCertsMissingCATests
tearDown	tests/test_vpn_certs.py	/^    def tearDown(self):$/;"	m	class:VPNCertsTests
tearDownClass	tests/test_huey_taskqueue.py	/^    def tearDownClass(cls):$/;"	m	class:DeployHostConfigTests
template_name	views/registration_view.py	/^    template_name = 'django_registration\/registration_form.html'$/;"	v	class:UserRegistrationView
template_name	views/registration_view.py	/^    template_name = 'django_registration\/registration_resend.html'$/;"	v	class:UserRegistrationResendView
template_name	views/user_as_views.py	/^    template_name = "scionlab\/user.html"$/;"	v	class:UserASesView
template_name	views/user_as_views.py	/^    template_name = "scionlab\/user_as_add.html"$/;"	v	class:UserASCreateView
template_name	views/user_as_views.py	/^    template_name = "scionlab\/user_as_confirm_delete.html"$/;"	v	class:UserASDeleteView
template_name	views/user_as_views.py	/^    template_name = "scionlab\/user_as_details.html"$/;"	v	class:UserASDetailView
test_aaa	tests/test_api.py	/^    def test_aaa(self):$/;"	m	class:GetHostConfigTests
test_account_not_activated	tests/test_registration.py	/^    def test_account_not_activated(self):$/;"	m	class:ActivationRequiredTest
test_add	tests/test_portmap.py	/^    def test_add(self, ip):$/;"	m	class:PortMapTests
test_as_listing	tests/test_user_as_views.py	/^    def test_as_listing(self):$/;"	m	class:UserASPageTests
test_as_str	tests/test_models.py	/^    def test_as_str(self):$/;"	m	class:StringRepresentationTests
test_bad_auth	tests/test_api.py	/^    def test_bad_auth(self):$/;"	m	class:GetHostConfigTests
test_bad_auth	tests/test_api.py	/^    def test_bad_auth(self):$/;"	m	class:PostHostConfigVersionTests
test_bad_request	tests/test_api.py	/^    def test_bad_request(self):$/;"	m	class:GetHostConfigTests
test_bad_request	tests/test_api.py	/^    def test_bad_request(self):$/;"	m	class:PostHostConfigVersionTests
test_bind_ip	tests/test_user_as_models.py	/^test_bind_ip = '192.168.1.2'$/;"	v
test_bind_port	tests/test_user_as_models.py	/^test_bind_port = 6666$/;"	v
test_canceled	tests/test_huey_taskqueue.py	/^    def test_canceled(self):$/;"	m	class:DeployHostConfigTests
test_change_ap	tests/test_user_as_models.py	/^    def test_change_ap(self, ap_index):$/;"	m	class:UpdateUserASTests
test_change_vpn_server	tests/test_user_as_models.py	/^    def test_change_vpn_server(self):$/;"	m	class:VPNServerTests
test_changed	tests/test_api.py	/^    def test_changed(self):$/;"	m	class:GetHostConfigTests
test_corrupted_max_id	tests/test_user_as_models.py	/^    def test_corrupted_max_id(self, mock):$/;"	m	class:GenerateUserASIDTests
test_create_as_button	tests/test_user_as_views.py	/^    def test_create_as_button(self):$/;"	m	class:UserASPageTests
test_create_as_button_no_quota	tests/test_user_as_views.py	/^    def test_create_as_button_no_quota(self):$/;"	m	class:UserASPageTests
test_create_as_form	tests/test_admin.py	/^    def test_create_as_form(self):$/;"	m	class:ASAdminTests
test_create_as_with_default_services	tests/test_models.py	/^    def test_create_as_with_default_services(self):$/;"	m	class:InitASTests
test_create_as_with_keys	tests/test_models.py	/^    def test_create_as_with_keys(self):$/;"	m	class:InitASTests
test_create_coreas_with_keys	tests/test_models.py	/^    def test_create_coreas_with_keys(self):$/;"	m	class:InitASTests
test_create_delete_create	tests/test_certificates.py	/^    def test_create_delete_create(self):$/;"	m	class:TRCAndCoreASCertificateTestsSimple
test_create_delete_link	tests/test_models.py	/^    def test_create_delete_link(self):$/;"	m	class:LinkModificationTests
test_create_initial	tests/test_certificates.py	/^    def test_create_initial(self):$/;"	m	class:TRCAndCoreASCertificateTestsISD19
test_create_invalid	tests/test_user_as_views.py	/^    def test_create_invalid(self, **kwargs):$/;"	m	class:UserASFormTests
test_create_link	tests/test_admin.py	/^    def test_create_link(self):$/;"	m	class:LinkAdminFormTests
test_create_link	tests/test_admin.py	/^    def test_create_link(self):$/;"	m	class:LinkAdminViewTests
test_create_mixed	tests/test_user_as_models.py	/^    def test_create_mixed(self, mock):$/;"	m	class:CreateUserASTests
test_create_new	tests/test_user_as_models.py	/^    def test_create_new(self):$/;"	m	class:VPNServerTests
test_create_public_bind_ip	tests/test_user_as_models.py	/^    def test_create_public_bind_ip(self, ap_index):$/;"	m	class:CreateUserASTests
test_create_public_ip	tests/test_user_as_models.py	/^    def test_create_public_ip(self, ap_index):$/;"	m	class:CreateUserASTests
test_create_too_many	tests/test_user_as_views.py	/^    def test_create_too_many(self):$/;"	m	class:UserASFormTests
test_create_update	tests/test_certificates.py	/^    def test_create_update(self):$/;"	m	class:TRCAndCoreASCertificateTestsISD19
test_create_valid	tests/test_user_as_views.py	/^    def test_create_valid(self, **kwargs):$/;"	m	class:UserASFormTests
test_create_vpn	tests/test_user_as_models.py	/^    def test_create_vpn(self):$/;"	m	class:CreateUserASTests
test_cycle_active	tests/test_user_as_models.py	/^    def test_cycle_active(self):$/;"	m	class:ActivateUserASTests
test_cycle_active	tests/test_user_as_views.py	/^    def test_cycle_active(self):$/;"	m	class:UserASActivateTests
test_cycle_ap	tests/test_user_as_models.py	/^    def test_cycle_ap(self):$/;"	m	class:UpdateUserASTests
test_cycle_ap_vpn	tests/test_user_as_models.py	/^    def test_cycle_ap_vpn(self):$/;"	m	class:UpdateUserASTests
test_cycle_vpn	tests/test_user_as_models.py	/^    def test_cycle_vpn(self):$/;"	m	class:UpdateUserASTests
test_delete_bulk	tests/test_models.py	/^    def test_delete_bulk(self):$/;"	m	class:DeleteASTests
test_delete_single	tests/test_user_as_models.py	/^    def test_delete_single(self):$/;"	m	class:DeleteUserASTests
test_delete_single_as	tests/test_models.py	/^    def test_delete_single_as(self):$/;"	m	class:DeleteASTests
test_delete_user	tests/test_user_as_models.py	/^    def test_delete_user(self):$/;"	m	class:DeleteUserASTests
test_dequeuing	tests/test_huey_taskqueue.py	/^    def test_dequeuing(self):$/;"	m	class:DeployHostConfigTests
test_disable_vpn	tests/test_user_as_models.py	/^    def test_disable_vpn(self):$/;"	m	class:UpdateUserASTests
test_double_trigger_update	tests/test_huey_taskqueue.py	/^    def test_double_trigger_update(self):$/;"	m	class:DeployHostConfigTests
test_dummy	tests/test_huey_taskqueue.py	/^    def test_dummy(self):$/;"	m	class:DeployHostConfigTests
test_edit_link	tests/test_admin.py	/^    def test_edit_link(self):$/;"	m	class:LinkAdminFormTests
test_edit_render	tests/test_user_as_views.py	/^    def test_edit_render(self, **kwargs):$/;"	m	class:UserASFormTests
test_empty	tests/test_api.py	/^    def test_empty(self):$/;"	m	class:GetHostConfigTests
test_empty	tests/test_huey_taskqueue.py	/^    def test_empty(self):$/;"	m	class:DeployHostConfigTests
test_empty	tests/test_portmap.py	/^    def test_empty(self, ip):$/;"	m	class:PortMapTests
test_empty_isd	tests/test_certificates.py	/^    def test_empty_isd(self):$/;"	m	class:TRCAndCoreASCertificateTestsSimple
test_enable_vpn	tests/test_user_as_models.py	/^    def test_enable_vpn(self):$/;"	m	class:UpdateUserASTests
test_encode	tests/test_hashers.py	/^    def test_encode(self):$/;"	m	class:SCryptPasswordHasherTests
test_enqueing	tests/test_huey_taskqueue.py	/^    def test_enqueing(self):$/;"	m	class:DeployHostConfigTests
test_exhaust_vpn_clients	tests/test_user_as_models.py	/^    def test_exhaust_vpn_clients(self, _):$/;"	m	class:CreateUserASTests
test_exhausted	tests/test_user_as_models.py	/^    def test_exhausted(self, mock):$/;"	m	class:GenerateUserASIDTests
test_first	tests/test_user_as_models.py	/^    def test_first(self):$/;"	m	class:GenerateUserASIDTests
test_generate_certs	tests/test_vpn_certs.py	/^    def test_generate_certs(self):$/;"	m	class:VPNCertsTests
test_generate_client_cert	tests/test_vpn_certs.py	/^    def test_generate_client_cert(self):$/;"	m	class:VPNCertsMissingCATests
test_generate_server_config	tests/test_vpn_certs.py	/^    def test_generate_server_config(self):$/;"	m	class:VPNCertsTests
test_generating_ca_cert__existing_key	tests/test_vpn_certs.py	/^    def test_generating_ca_cert__existing_key(self):$/;"	m	class:RootCASetupTests
test_get	tests/test_api.py	/^    def test_get(self):$/;"	m	class:GetHostConfigExtraServicesTests
test_get_config	tests/test_user_as_views.py	/^    def test_get_config(self):$/;"	m	class:UserASGetConfigTests
test_get_create_form	tests/test_user_as_views.py	/^    def test_get_create_form(self):$/;"	m	class:UserASCreateTests
test_get_create_form_no_quota	tests/test_user_as_views.py	/^    def test_get_create_form_no_quota(self):$/;"	m	class:UserASCreateTests
test_get_not_allowed	tests/test_api.py	/^    def test_get_not_allowed(self):$/;"	m	class:PostHostConfigVersionTests
test_harden_runtime	tests/test_hashers.py	/^    def test_harden_runtime(self):$/;"	m	class:SCryptPasswordHasherTests
test_host_noop_update	tests/test_huey_taskqueue.py	/^    def test_host_noop_update(self):$/;"	m	class:DeployHostConfigTests
test_imported	tests/test_hashers.py	/^    def test_imported(self, email, password, encoded):$/;"	m	class:SCryptPasswordHasherTests
test_initialization	tests/test_vpn_certs.py	/^    def test_initialization(self):$/;"	m	class:RootCASetupTests
test_isd_str	tests/test_models.py	/^    def test_isd_str(self):$/;"	m	class:StringRepresentationTests
test_last	tests/test_user_as_models.py	/^    def test_last(self, mock):$/;"	m	class:GenerateUserASIDTests
test_loading_ca_cert	tests/test_vpn_certs.py	/^    def test_loading_ca_cert(self):$/;"	m	class:RootCASetupTests
test_loading_ca_key	tests/test_vpn_certs.py	/^    def test_loading_ca_key(self):$/;"	m	class:RootCASetupTests
test_logged_in	tests/test_user.py	/^    def test_logged_in(self):$/;"	m	class:LoginRequiredRedirectTests
test_login	tests/test_hashers.py	/^    def test_login(self, email, password, encoded):$/;"	m	class:ImportedUserTests
test_newer_than_config	tests/test_api.py	/^    def test_newer_than_config(self):$/;"	m	class:PostHostConfigVersionTests
test_no_auth	tests/test_api.py	/^    def test_no_auth(self):$/;"	m	class:GetHostConfigTests
test_no_auth	tests/test_api.py	/^    def test_no_auth(self):$/;"	m	class:PostHostConfigVersionTests
test_not_logged_in	tests/test_user.py	/^    def test_not_logged_in(self):$/;"	m	class:LoginRequiredRedirectTests
test_older_than_prev_deployed	tests/test_api.py	/^    def test_older_than_prev_deployed(self):$/;"	m	class:PostHostConfigVersionTests
test_parse_fail	tests/test_as_ids.py	/^    def test_parse_fail(self, as_id_str):$/;"	m	class:ASIDTests
test_parse_format	tests/test_as_ids.py	/^    def test_parse_format(self, as_id_str, expected_int):$/;"	m	class:ASIDTests
test_post_create_form_no_quota	tests/test_user_as_views.py	/^    def test_post_create_form_no_quota(self):$/;"	m	class:UserASCreateTests
test_post_not_allowed	tests/test_api.py	/^    def test_post_not_allowed(self):$/;"	m	class:GetHostConfigTests
test_public_ip	tests/test_huey_taskqueue.py	/^test_public_ip = '172.31.0.111'$/;"	v
test_public_ip	tests/test_user_as_models.py	/^test_public_ip = '172.31.0.111'$/;"	v
test_public_port	tests/test_huey_taskqueue.py	/^test_public_port = 54321$/;"	v
test_public_port	tests/test_user_as_models.py	/^test_public_port = 54321$/;"	v
test_public_port	tests/test_vpn_certs.py	/^test_public_port = 54321$/;"	v
test_random_mutations	tests/test_certificates.py	/^    def test_random_mutations(self):$/;"	m	class:TRCAndCoreASCertificateTestsSimple
test_render_create	tests/test_admin.py	/^    def test_render_create(self):$/;"	m	class:LinkAdminFormTests
test_render_create	tests/test_user_as_views.py	/^    def test_render_create(self):$/;"	m	class:UserASFormTests
test_render_edit	tests/test_admin.py	/^    def test_render_edit(self):$/;"	m	class:LinkAdminFormTests
test_reset_pwd	tests/test_user.py	/^    def test_reset_pwd(self):$/;"	m	class:PasswordWebTests
test_safe_summary	tests/test_hashers.py	/^    def test_safe_summary(self):$/;"	m	class:SCryptPasswordHasherTests
test_second	tests/test_user_as_models.py	/^    def test_second(self, mock):$/;"	m	class:GenerateUserASIDTests
test_sequential	tests/test_portmap.py	/^    def test_sequential(self, ip):$/;"	m	class:PortMapTests
test_server_vpn_ip	tests/test_user_as_models.py	/^    def test_server_vpn_ip(self):$/;"	m	class:CreateUserASTests
test_submit_create_form_invalid	tests/test_user_as_views.py	/^    def test_submit_create_form_invalid(self, **kwargs):$/;"	m	class:UserASCreateTests
test_submit_create_form_valid	tests/test_user_as_views.py	/^    def test_submit_create_form_valid(self, **kwargs):$/;"	m	class:UserASCreateTests
test_success	tests/test_api.py	/^    def test_success(self):$/;"	m	class:PostHostConfigVersionTests
test_unchanged	tests/test_api.py	/^    def test_unchanged(self):$/;"	m	class:GetHostConfigTests
test_update_core_cert	tests/test_certificates.py	/^    def test_update_core_cert(self):$/;"	m	class:TRCAndCoreASCertificateTestsISD19
test_update_keys	tests/test_models.py	/^    def test_update_keys(self):$/;"	m	class:UpdateASKeysTests
test_update_link	tests/test_models.py	/^    def test_update_link(self):$/;"	m	class:LinkModificationTests
test_update_single_cert	tests/test_certificates.py	/^    def test_update_single_cert(self):$/;"	m	class:TRCAndCoreASCertificateTestsISD19
test_update_vpn	tests/test_user_as_models.py	/^    def test_update_vpn(self):$/;"	m	class:VPNServerTests
test_used_after_get	tests/test_portmap.py	/^    def test_used_after_get(self, ip):$/;"	m	class:PortMapTests
test_vpn_client_next_ip	tests/test_user_as_models.py	/^    def test_vpn_client_next_ip(self):$/;"	m	class:UpdateUserASTests
testtopo_num_attachment_points	tests/test_user_as_models.py	/^testtopo_num_attachment_points = sum(1 for as_def in testtopo.ases if as_def.is_ap)$/;"	v
title	admin.py	/^        title = "Infrastructure AS"$/;"	v	class:ASAdmin.InfrastructureASFilter
to_bind_ip	admin.py	/^    to_bind_ip = forms.GenericIPAddressField(required=False)$/;"	v	class:LinkAdminForm
to_bind_port	admin.py	/^    to_bind_port = forms.IntegerField(min_value=1, max_value=MAX_PORT, required=False)$/;"	v	class:LinkAdminForm
to_host	admin.py	/^    to_host = forms.ModelChoiceField(queryset=Host.objects.all())$/;"	v	class:LinkAdminForm
to_public_ip	admin.py	/^    to_public_ip = forms.GenericIPAddressField(required=False)$/;"	v	class:LinkAdminForm
to_public_port	admin.py	/^    to_public_port = forms.IntegerField(min_value=1, max_value=MAX_PORT, required=False)$/;"	v	class:LinkAdminForm
to_python	forms/fields.py	/^    def to_python(self, value):$/;"	m	class:GenericIPNetworkField
topology_png	views/topology.py	/^def topology_png(request):$/;"	f
trc	models/core.py	/^    trc = jsonfield.JSONField($/;"	v	class:ISD
trc_priv_keys	models/core.py	/^    trc_priv_keys = jsonfield.JSONField($/;"	v	class:ISD
trigger_config_deployment	admin.py	/^    def trigger_config_deployment(self, request, queryset):$/;"	m	class:ASAdmin
trigger_config_deployment	admin.py	/^    def trigger_config_deployment(self, request, queryset):$/;"	m	class:HostAdmin
trigger_deployment	models/user_as.py	/^    def trigger_deployment(self):$/;"	m	class:AttachmentPoint
type	admin.py	/^    def type(self, obj):$/;"	m	class:InterfaceInline
type	models/core.py	/^    type = models.CharField($/;"	v	class:Link
type	models/core.py	/^    type = models.CharField($/;"	v	class:Service
uid	models/core.py	/^    uid = models.CharField(max_length=_MAX_LEN_DEFAULT, unique=True, editable=False,$/;"	v	class:Host
unique_together	migrations/0001_initial.py	/^            unique_together={('as_id',)},$/;"	v	class:Migration
unique_together	models/core.py	/^        unique_together = ('AS', 'internal_ip')$/;"	v	class:Host.Meta
unique_together	models/core.py	/^        unique_together = ('as_id',)    # could be primary key$/;"	v	class:AS.Meta
unique_together	models/vpn.py	/^        unique_together = ('vpn', 'ip')$/;"	v	class:VPNClient.Meta
update	admin.py	/^    def update(self):$/;"	m	class:BorderRouterAdminForm
update	admin.py	/^    def update(self):$/;"	m	class:HostAdminForm
update	admin.py	/^    def update(self):$/;"	m	class:InterfaceAdminForm
update	admin.py	/^    def update(self):$/;"	m	class:LinkAdminForm
update	admin.py	/^    def update(self):$/;"	m	class:ServiceAdminForm
update	admin.py	/^    def update(self):$/;"	m	class:VPNUpdateForm
update	admin.py	/^    def update(self):$/;"	m	class:_CreateUpdateModelForm
update	models/core.py	/^    def update(self, host=_placeholder, internal_port=_placeholder, control_port=_placeholder):$/;"	m	class:BorderRouter
update	models/core.py	/^    def update(self, host=_placeholder, port=_placeholder):$/;"	m	class:Service
update	models/core.py	/^    def update(self, type=None, active=None, bandwidth=None, mtu=None):$/;"	m	class:Link
update	models/core.py	/^    def update(self,$/;"	m	class:Host
update	models/core.py	/^    def update(self,$/;"	m	class:Interface
update	models/user_as.py	/^    def update(self,$/;"	m	class:UserAS
update	models/vpn.py	/^    def update(self,$/;"	m	class:VPN
update	util/portmap.py	/^    def update(self, *args, **kwargs):$/;"	m	class:LazyPortMap
update	util/portmap.py	/^    def update(self, ip, ports):$/;"	m	class:PortMap
update_active	models/core.py	/^    def update_active(self, active):$/;"	m	class:Link
update_active	models/user_as.py	/^    def update_active(self, active):$/;"	m	class:UserAS
update_core_as_keys	models/core.py	/^    def update_core_as_keys(queryset):$/;"	m	class:AS
update_core_keys	admin.py	/^    def update_core_keys(self, request, queryset):$/;"	m	class:ASAdmin
update_ip_fields_show	templates/scionlab/partials/user_as_form_script.html	/^function update_ip_fields_show() {$/;"	f
update_keys	admin.py	/^    def update_keys(self, request, queryset):$/;"	m	class:ASAdmin
update_keys	models/core.py	/^    def update_keys(self):$/;"	m	class:AS
update_trc_and_core_certificates	models/core.py	/^    def update_trc_and_core_certificates(self):$/;"	m	class:ISD
update_use_vpn_enable	templates/scionlab/partials/user_as_form_script.html	/^function update_use_vpn_enable() {$/;"	f
update_useras	tests/test_user_as_models.py	/^def update_useras(testcase, user_as, **kwargs):$/;"	f
urlpatterns	urls.py	/^urlpatterns = [$/;"	v
use_in_migrations	models/user.py	/^    use_in_migrations = True$/;"	v	class:UserManager
use_vpn	forms/attachment_link_form.py	/^    use_vpn = forms.BooleanField($/;"	v	class:AttachmentLinkForm
username	models/user.py	/^    username = None$/;"	v	class:User
valid_form_params	tests/test_user_as_views.py	/^    valid_form_params = [$/;"	v	class:UserASFormTests
validators	models/core.py	/^        validators=[$/;"	v	class:AS
value_set	util/django.py	/^def value_set(query_set, field_name):$/;"	f
verbose_name	models/core.py	/^                           verbose_name="UID")$/;"	v	class:Host
verbose_name	models/core.py	/^        verbose_name = 'AS'$/;"	v	class:AS.Meta
verbose_name	models/core.py	/^        verbose_name = 'ISD'$/;"	v	class:ISD.Meta
verbose_name	models/core.py	/^        verbose_name="TRC private keys",$/;"	v	class:ISD
verbose_name	models/core.py	/^        verbose_name="Trust Root Configuration (TRC)")$/;"	v	class:ISD
verbose_name	models/core.py	/^        verbose_name='AS-ID'$/;"	v	class:AS
verbose_name	models/core.py	/^        verbose_name='ISD'$/;"	v	class:AS
verbose_name	models/user_as.py	/^        verbose_name = 'User AS'$/;"	v	class:UserAS.Meta
verbose_name	models/vpn.py	/^        verbose_name = 'VPN Client'$/;"	v	class:VPNClient.Meta
verbose_name	models/vpn.py	/^        verbose_name = 'VPN'$/;"	v	class:VPN.Meta
verbose_name_plural	models/core.py	/^        verbose_name_plural = 'ASes'$/;"	v	class:AS.Meta
verbose_name_plural	models/core.py	/^        verbose_name_plural = 'ISDs'$/;"	v	class:ISD.Meta
verbose_name_plural	models/user_as.py	/^        verbose_name_plural = 'User ASes'$/;"	v	class:UserAS.Meta
verbose_name_plural	models/vpn.py	/^        verbose_name_plural = 'VPN Clients'$/;"	v	class:VPNClient.Meta
verbose_name_plural	models/vpn.py	/^        verbose_name_plural = 'VPNs'$/;"	v	class:VPN.Meta
verify	util/hashers.py	/^    def verify(self, password, encoded):$/;"	m	class:SCryptPasswordHasher
verleq	hostfiles/run.sh	/^verleq() {$/;"	f
verleq	hostfiles/scion_upgrade_script.sh	/^verleq() {$/;"	f
view_decorator	util/http.py	/^    def view_decorator(view):$/;"	f	function:basicauth
vpn	models/user_as.py	/^    vpn = models.OneToOneField($/;"	v	class:AttachmentPoint
vpn	models/vpn.py	/^    vpn = models.ForeignKey($/;"	v	class:VPNClient
vpn_client	models/core.py	/^    vpn_client = models.ForeignKey(VPNClient, on_delete=models.SET_NULL, null=True)$/;"	v	class:Interface
vpn_subnet	models/vpn.py	/^    def vpn_subnet(self):$/;"	m	class:VPN
vpns	fixtures/testtopo.py	/^vpns = [$/;"	v
widgets	forms/user_as_form.py	/^        widgets = {$/;"	v	class:UserASForm.Meta
wrapper	util/http.py	/^        def wrapper(request, *args, **kwargs):$/;"	f	function:basicauth.view_decorator
write_config	util/archive.py	/^    def write_config(self, path, config):$/;"	m	class:BaseArchiveWriter
write_dispatcher_config	util/local_config_util.py	/^def write_dispatcher_config(archive):$/;"	f
write_ia_file	util/local_config_util.py	/^def write_ia_file(archive, as_):$/;"	f
write_json	util/archive.py	/^    def write_json(self, path, content):$/;"	m	class:BaseArchiveWriter
write_supervisord_group_config	util/local_config_util.py	/^def write_supervisord_group_config(archive, as_, processes):$/;"	f
write_text	util/archive.py	/^    def write_text(self, path, content):$/;"	m	class:BaseArchiveWriter
write_text	util/archive.py	/^    def write_text(self, path, content):$/;"	m	class:FileArchiveWriter
write_text	util/archive.py	/^    def write_text(self, path, content):$/;"	m	class:TarWriter
write_toml	util/archive.py	/^    def write_toml(self, path, content):$/;"	m	class:BaseArchiveWriter
write_vpn_ca_config	openvpn_config.py	/^def write_vpn_ca_config():$/;"	f
write_yaml	util/archive.py	/^    def write_yaml(self, path, content):$/;"	m	class:BaseArchiveWriter
